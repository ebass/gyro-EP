%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /global/u2/b/bassem/gyro-EP/src/gyro_build_sparse_poissonaperp.f90
Compiled : 01/19/21  15:35:32
Compiler : Version 9.1.0
Ftnlx    : Version 9.1.0 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hdynamic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -hnoomp -em
           -J/global/homes/b/bassem/gyro-EP/modules -sreal64 -eD -Ktrap=fp -m1
           -Rbcdps -G0 -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -c gyro_build_sparse_poissonaperp.f90
           -I/opt/cray/pe/cce/9.1.0/cce-clang/x86_64/lib/clang/9.0.0/include
           -I/opt/cray/pe/cce/9.1.0/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -I/opt/cray/pe/libsci/19.06.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.10/gni/mpich-cray/9.0/include
           -I/opt/cray/pe/hdf5/1.10.5.2/cray/9.0/include
           -I/opt/cray/pe/netcdf/4.6.3.2/cray/9.0/include
           -I/opt/cray/rca/2.2.20-7.0.1.1_4.53__g8e3fb5b.ari/include
           -I/opt/cray/alps/6.6.58-7.0.1.1_6.10__g437d88db.ari/include
           -I/opt/cray/xpmem/2.2.20-7.0.1.1_4.14__g0475745.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-7.0.1.1_6.32__g3b1768f.ari/include
           -I/opt/cray/dmapp/7.1.1-7.0.1.1_4.54__g38cf134.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/ugni/6.0.14.0-7.0.1.1_7.40__ge78e5b0.ari/include
           -I/opt/cray/udreg/2.3.2-7.0.1.1_3.38__g8175d3d.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.1.1_4.16__g7109084.ari/include
           -I/opt/cray/krca/2.2.6-7.0.1.1_5.39__gb641b12.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
Program
  Units  : GYRO_BUILD_SPARSE_POISSONAPERP

ftnlx report
------------
Source   : /global/u2/b/bassem/gyro-EP/src/gyro_build_sparse_poissonaperp.f90
Date     : 01/19/2021  15:35:32


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !------------------------------------------------------------
    2.    ! gyro_build_sparse_poissonaperp.f90 [caller: sparse_solve_*]
    3.    !
    4.    ! PURPOSE:
    5.    !  Fill elements of sparse Poisson-aperp submatrix.
    6.    !------------------------------------------------------------
    7.    
    8.    subroutine gyro_build_sparse_poissonaperp
    9.    
   10.      use gyro_globals
   11.      use math_constants
   12.      use gyro_poissonaperp_private
   13.    
   14.      !------------------------
   15.      implicit none
   16.      !------------------------
   17.    
   18.      ! Zero only the in_1 components:
   19.      m_poissonaperp(:)    = (0.0,0.0)
ftn-6263 ftn: VECTOR GYRO_BUILD_SPARSE_POISSONAPERP, File = gyro_build_sparse_poissonaperp.f90, Line = 19 
  A loop starting at line 19 was not vectorized because it contains a reference to a non-vector intrinsic on line 19.

   20.      indx_poissonaperp(:) = 0
ftn-6263 ftn: VECTOR GYRO_BUILD_SPARSE_POISSONAPERP, File = gyro_build_sparse_poissonaperp.f90, Line = 20 
  A loop starting at line 20 was not vectorized because it contains a reference to a non-vector intrinsic on line 20.

   21.    
   22.      k_counter = 0
   23.    
   24.      !-----------------------------------------------------------
   25.      ! Compute block M(1,1) 
   26.      !
   27.      do i=1,n_x_max
   28.         do i_diff=-m_gyro,m_gyro-i_gyro
   29.    
   30.            ip = i_loop(i+i_diff)
   31.    
   32.            if (ip >= 1 .and. ip <= n_x) then
   33.    
   34.               do j=1,n_blend
   35.                  do jp=1,n_blend
   36.    
   37.                     val = ap_mm(i,i_diff,j,jp)
   38.    
   39.                     ij  = i + (j-1)*n_x
   40.                     ijp = ip + (jp-1)*n_x
   41.    
   42.                     k_counter = k_counter+1
   43.    
   44.                     indx_poissonaperp(k_counter)           = ij
   45.                     indx_poissonaperp(k_counter+n_poissonaperp) = ijp
   46.    
   47.                     m_poissonaperp(k_counter) = val
   48.    
   49.                  enddo ! jp
   50.               enddo ! j
   51.    
   52.            endif
   53.    
   54.         enddo ! ip
   55.      enddo ! i
   56.    
   57.      !-----------------------------------------------------------
   58.      ! Compute block M(2,2)
   59.      !
   60.      do i=1,n_x_max
   61.         do i_diff=-m_gyro,m_gyro-i_gyro
   62.    
   63.            ip = i_loop(i+i_diff)
   64.    
   65.            if (ip >= 1 .and. ip <= n_x) then
   66.    
   67.               do j=1,n_blend
   68.                  do jp=1,n_blend
   69.    
   70.                     val = ab_mm(i,i_diff,j,jp) &
   71.                          + coll_vel_perp1(i,j,jp)*w_g0(i_diff)
   72.    
   73.                     ij  = i + (j-1)*n_x   + n_x*n_blend
   74.                     ijp = ip + (jp-1)*n_x + n_x*n_blend
   75.    
   76.                     k_counter = k_counter+1
   77.    
   78.                     indx_poissonaperp(k_counter)           = ij
   79.                     indx_poissonaperp(k_counter+n_poissonaperp) = ijp
   80.    
   81.                     m_poissonaperp(k_counter) = val
   82.    
   83.                  enddo ! jp
   84.               enddo ! j
   85.    
   86.            endif
   87.    
   88.         enddo ! ip
   89.      enddo ! i
   90.    
   91.      !-----------------------------------------------------------
   92.      ! Compute block M(1,2)
   93.      !
   94.      do i=1,n_x_max
   95.         do i_diff=-m_gyro,m_gyro-i_gyro
   96.    
   97.            ip = i_loop(i+i_diff)
   98.    
   99.            if (ip >= 1 .and. ip <= n_x) then
  100.    
  101.               do j=1,n_blend
  102.                  do jp=1,n_blend
  103.    
  104.                     val = -2.0*abp_mm(i,i_diff,j,jp) &
  105.                          -2.0*coll_vel_perp2(i,j,jp)*w_g0(i_diff)
  106.    
  107.                     ij  = i + (j-1)*n_x
  108.                     ijp = ip + (jp-1)*n_x + n_x*n_blend
  109.    
  110.                     k_counter = k_counter+1
  111.    
  112.                     indx_poissonaperp(k_counter)           = ij
  113.                     indx_poissonaperp(k_counter+n_poissonaperp) = ijp
  114.    
  115.                     m_poissonaperp(k_counter) = val
  116.    
  117.                  enddo ! jp
  118.               enddo ! j
  119.    
  120.            endif
  121.    
  122.         enddo ! ip
  123.      enddo ! i
  124.    
  125.      !-----------------------------------------------------------
  126.      ! Compute block M(2,1)
  127.      !
  128.      do i=1,n_x_max
  129.         do i_diff=-m_gyro,m_gyro-i_gyro
  130.    
  131.            ip = i_loop(i+i_diff)
  132.    
  133.            if (ip >= 1 .and. ip <= n_x) then
  134.    
  135.               do j=1,n_blend
  136.                  do jp=1,n_blend
  137.    
  138.                     val = abp_mm(i,i_diff,j,jp)  &
  139.                          + coll_vel_perp2(i,j,jp)*w_g0(i_diff)
  140.    
  141.                     ij  = i + (j-1)*n_x  + n_x*n_blend
  142.                     ijp = ip + (jp-1)*n_x
  143.    
  144.                     k_counter = k_counter+1
  145.    
  146.                     indx_poissonaperp(k_counter)           = ij
  147.                     indx_poissonaperp(k_counter+n_poissonaperp) = ijp
  148.    
  149.                     m_poissonaperp(k_counter) = val
  150.    
  151.                  enddo ! jp
  152.               enddo ! j
  153.    
  154.            endif
  155.    
  156.         enddo ! ip
  157.      enddo ! i
  158.    
  159.      if (boundary_method == 1 .and. n_1(in_1) == 0) then
  160.    
  161.         !------------------------------------------------
  162.         ! Here, we need to write a line of 1's in last 
  163.         ! row (i=n_x) of blocks M(1,1), M(2,2).  A 
  164.         ! line of zeros in the last rows of M(x,y) for y!=x
  165.         ! will of course be automatic.
  166.         !     
  167.         ! We do this to ensure that all n=0 modes have 
  168.         ! no radial average.
  169.         !------------------------------------------------
  170.    
  171.         !------------------------------------------------
  172.         ! Line of 1's in M(1,1)
  173.         ! 
  174.         i = n_x 
  175.         do j=1,n_blend
  176.            do ip=1,n_x
  177.    
  178.               ! Diagonal in (j,jp)
  179.               jp = j
  180.    
  181.               ij  = i + (j-1)*n_x
  182.               ijp = ip + (jp-1)*n_x
  183.    
  184.               k_counter = k_counter+1
  185.    
  186.               indx_poissonaperp(k_counter)                = ij
  187.               indx_poissonaperp(k_counter+n_poissonaperp) = ijp
  188.    
  189.               m_poissonaperp(k_counter) = (1.0,0.0)
  190.    
  191.            enddo ! ip
  192.         enddo ! j
  193.    
  194.         !------------------------------------------------
  195.         ! Line of 1's in M(2,2)
  196.         ! 
  197.         i = n_x
  198.         do j=1,n_blend
  199.            do ip=1,n_x
  200.    
  201.               ! Diagonal in (j,jp)
  202.               jp = j
  203.    
  204.               ij  = i + (j-1)*n_x + n_x*n_blend
  205.               ijp = ip + (jp-1)*n_x + n_x*n_blend
  206.    
  207.               k_counter = k_counter+1
  208.    
  209.               indx_poissonaperp(k_counter)                = ij
  210.               indx_poissonaperp(k_counter+n_poissonaperp) = ijp
  211.    
  212.               m_poissonaperp(k_counter) = (1.0,0.0)
  213.    
  214.            enddo ! ip
  215.         enddo ! j
  216.    
  217.      endif
  218.    
  219.      if (k_counter /= n_poissonaperp) then
  220.         print *,k_counter,n_poissonaperp
  221.         call catch_error("Element count mismatch in gyro_build_sparse_poissonaperp")
  222.      endif
  223.    
  224.      if (debug_flag == 1 .and. i_proc == 0) then
  225.         print *,'[gyro_build_sparse_poissonaperp done]'
  226.      endif
  227.    
  228.    end subroutine gyro_build_sparse_poissonaperp
  229.    


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
CATCH_ERROR
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_BUILD_SPARSE_POISSONAPERP (Line 221, file gyro_build_sparse_poissonaperp.f90)

Name  Messages
----  --------
CHAR(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_BUILD_SPARSE_POISSONAPERP
      Defined as:  Subroutine (line 8, file gyro_build_sparse_poissonaperp.f90)

      Interface:   None

      Calls:       CATCH_ERROR (Line 221, file gyro_build_sparse_poissonaperp.f90)

        Uses:      GYRO_GLOBALS
                   MATH_CONSTANTS
                   GYRO_POISSONAPERP_PRIVATE

Name  Messages
----  --------
GYRO_GLOBALS
      Defined as:  No definitions.

      Used By:     GYRO_BUILD_SPARSE_POISSONAPERP

Name  Messages
----  --------
GYRO_POISSONAPERP_PRIVATE
      Defined as:  No definitions.

      Used By:     GYRO_BUILD_SPARSE_POISSONAPERP

Name  Messages
----  --------
MATH_CONSTANTS
      Defined as:  No definitions.

      Used By:     GYRO_BUILD_SPARSE_POISSONAPERP


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
