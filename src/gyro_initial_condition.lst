%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /global/u2/b/bassem/gyro-EP/src/gyro_initial_condition.f90
Compiled : 01/19/21  15:35:40
Compiler : Version 9.1.0
Ftnlx    : Version 9.1.0 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hdynamic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -hnoomp -em
           -J/global/homes/b/bassem/gyro-EP/modules -sreal64 -eD -Ktrap=fp -m1
           -Rbcdps -G0 -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -c gyro_initial_condition.f90
           -I/opt/cray/pe/cce/9.1.0/cce-clang/x86_64/lib/clang/9.0.0/include
           -I/opt/cray/pe/cce/9.1.0/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -I/opt/cray/pe/libsci/19.06.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.10/gni/mpich-cray/9.0/include
           -I/opt/cray/pe/hdf5/1.10.5.2/cray/9.0/include
           -I/opt/cray/pe/netcdf/4.6.3.2/cray/9.0/include
           -I/opt/cray/rca/2.2.20-7.0.1.1_4.53__g8e3fb5b.ari/include
           -I/opt/cray/alps/6.6.58-7.0.1.1_6.10__g437d88db.ari/include
           -I/opt/cray/xpmem/2.2.20-7.0.1.1_4.14__g0475745.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-7.0.1.1_6.32__g3b1768f.ari/include
           -I/opt/cray/dmapp/7.1.1-7.0.1.1_4.54__g38cf134.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/ugni/6.0.14.0-7.0.1.1_7.40__ge78e5b0.ari/include
           -I/opt/cray/udreg/2.3.2-7.0.1.1_3.38__g8175d3d.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.1.1_4.16__g7109084.ari/include
           -I/opt/cray/krca/2.2.6-7.0.1.1_5.39__gb641b12.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
Program
  Units  : GYRO_INITIAL_CONDITION

ftnlx report
------------
Source   : /global/u2/b/bassem/gyro-EP/src/gyro_initial_condition.f90
Date     : 01/19/2021  15:35:40


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !-----------------------------------------------------
    2.    ! gyro_initial_condition.f90
    3.    !
    4.    ! PURPOSE:
    5.    !  Set initial value of h.
    6.    !
    7.    ! NOTES:
    8.    !  This is controlled by input parameters
    9.    !  AMP_PHI_0     -> amp_0
   10.    !  AMP_PHI_N     -> amp_n
   11.    !  AMP_PHI_STUDY -> amp_study (and n_study) 
   12.    !-------------------------------------------------------
   13.    
   14.    subroutine gyro_initial_condition
   15.    
   16.      use gyro_globals
   17.      use gyro_pointers
   18.      use math_constants
   19.    
   20.      !--------------------------------- 
   21.      implicit none
   22.      !
   23.      real :: x
   24.      real :: scale
   25.      real :: a_spec(n_kinetic)
   26.      real :: hs(n_x)
   27.      real :: as_0
   28.      real :: as_n
   29.      real :: fp(n_stack,n_x)
   30.      !----------------------------------
   31.    
   32.      !-------------------------------------------------------------------
   33.      h   = (0.0,0.0)
ftn-6332 ftn: VECTOR GYRO_INITIAL_CONDITION, File = gyro_initial_condition.f90, Line = 33 
  A loop starting at line 33 was not vectorized because it does not map well onto the target architecture.

   34.      h_0 = (0.0,0.0)
ftn-6332 ftn: VECTOR GYRO_INITIAL_CONDITION, File = gyro_initial_condition.f90, Line = 34 
  A loop starting at line 34 was not vectorized because it does not map well onto the target architecture.

   35.      !-------------------------------------------------------------------
   36.    
   37.      !-------------------------------------------------------------------
   38.      ! Normalization should keep mean-square potential 
   39.      ! invariant.  The overall normalization has been 
   40.      ! retained for backward compatibility with 16 modes.
   41.      !
   42.      scale = (rhos_norm/0.00357)*sqrt(16.0/n_n)
   43.      !
   44.      as_0 = amp_0*scale
   45.      as_n = amp_n*scale
   46.      !
   47.      ! Next, we need to correct for possible n_study reset
   48.      !
   49.      if (n_study /= 0) then
   50.         if (n_1(in_1) == n(n_study)) then
   51.            if (n_1(in_1) == 0) then
   52.               as_0 = amp_study*scale
   53.            else
   54.               as_n = amp_study*scale
   55.            endif
   56.         endif
   57.      endif
   58.      !-------------------------------------------------------------------
   59.    
   60.      !-------------------------------------------------------------------
   61.      ! We need the following normalization factor to ensure that
   62.      ! multiple identical species (with densities which sum to 
   63.      ! unity) give results identical to a single species.  The 
   64.      ! point here is to weight h by the fractional density.
   65.      ! 
   66.      a_spec(1:n_kinetic) = den_s(1:n_kinetic,ir_norm)/den_s(n_spec,ir_norm)
ftn-6263 ftn: VECTOR GYRO_INITIAL_CONDITION, File = gyro_initial_condition.f90, Line = 66 
  A loop starting at line 66 was not vectorized because it contains a reference to a non-vector intrinsic on line 66.

   67.      if (zf_test_flag == 1) then
   68.         a_spec(indx_e) = 0.0
   69.      endif
   70.      !-------------------------------------------------------------------
   71.    
   72.      select case (boundary_method)
   73.    
   74.      case (1)
   75.    
   76.         ! PERIODIC
   77.    
   78.         do i=1,n_x
   79.            x = (i-1.0)/n_x 
   80.            hs(i) = sin(2*pi*x)
   81.         enddo
   82.    
   83.      case (2)
   84.    
   85.         ! NONPERIODIC
   86.    
   87.         do i=1,n_x
   88.            x = (i-1.0)/(n_x-1) 
   89.            hs(i) = sin(2*pi*x)
   90.         enddo
   91.    
   92.      end select
   93.    
   94.    
   95.      ! Generate ICs
   96.    
   97.      p_nek_loc = 0
   98.    
   99.      do p_nek=1+i_proc_1,n_nek_1,n_proc_1
  100.    
  101.         p_nek_loc = p_nek_loc+1
  102.    
  103.         ie = nek_e(p_nek)  
  104.         k  = nek_k(p_nek)   
  105.    
  106.         ck = class(k)
  107.    
  108.         if (n_1(in_1) /= 0) then
  109.    
  110.            !==========
  111.            ! n > 0
  112.            !==========
  113.    
  114.            do m=1,n_stack
  115.               do i=1,n_x
  116.                  if (ic_method == 1) then
  117.                     ! Symmetric
  118.                     fp(m,i) = cos(theta_t(i,k,m)/2.0)**2
  119.                  else
  120.                     ! Asymmetric, useful for MT modes as suggested by W. Guttenfelder
  121.                     fp(m,i) = cos(theta_t(i,k,m)/2.0)**2+sin(theta_t(i,k,m))
  122.                  endif
  123.               enddo ! i
  124.            enddo ! m
  125.    
  126.            if (amp_n > 0.0) then
  127.    
  128.               ! Hump in theta
  129.    
  130.               do m=1,n_stack
  131.                  do i=1,n_x
  132.                     h(m,i,p_nek_loc,:) = a_spec(:)*as_n*fp(m,i)
ftn-6262 ftn: VECTOR GYRO_INITIAL_CONDITION, File = gyro_initial_condition.f90, Line = 132 
  A loop starting at line 132 was not vectorized because it contains a call to a subroutine or function on line 132.

  133.                  enddo ! i
  134.               enddo ! m
  135.    
  136.            else
  137.    
  138.               ! Sharp hump in theta
  139.    
  140.               do m=1,n_stack
  141.                  do i=1,n_x
  142.                     h(m,i,p_nek_loc,:) = a_spec(:)*abs(as_n)*fp(m,i)**4
ftn-6262 ftn: VECTOR GYRO_INITIAL_CONDITION, File = gyro_initial_condition.f90, Line = 142 
  A loop starting at line 142 was not vectorized because it contains a call to a subroutine or function on line 142.

  143.                  enddo ! i
  144.               enddo ! m
  145.    
  146.            endif
  147.    
  148.         else
  149.    
  150.            !==========
  151.            ! n = 0
  152.            !==========
  153.    
  154.            ! n=0 modes need zero radial average
  155.    
  156.            if (amp_0 > 0.0) then
  157.    
  158.               ! Sine wave in radius 
  159.    
  160.               do m=1,n_stack
  161.                  do i=1,n_x
  162.                     h(m,i,p_nek_loc,:) = a_spec(:)*as_0*hs(i)
ftn-6262 ftn: VECTOR GYRO_INITIAL_CONDITION, File = gyro_initial_condition.f90, Line = 162 
  A loop starting at line 162 was not vectorized because it contains a call to a subroutine or function on line 162.

  163.                  enddo ! i
  164.               enddo ! m
  165.    
  166.            else
  167.    
  168.               ! Sine^9 in radius
  169.    
  170.               do m=1,n_stack
  171.                  do i=1,n_x
  172.                     h(m,i,p_nek_loc,:) = a_spec(:)*as_0*hs(i)**9
ftn-6262 ftn: VECTOR GYRO_INITIAL_CONDITION, File = gyro_initial_condition.f90, Line = 172 
  A loop starting at line 172 was not vectorized because it contains a call to a subroutine or function on line 172.

  173.                  enddo ! i
  174.               enddo ! m
  175.    
  176.            endif
  177.    
  178.         endif
  179.    
  180.      enddo ! p_nek
  181.    
  182.    
  183.      ! Compute fields from distribution
  184.      call gyro_field_solve_explicit
  185.    
  186.      ! Generate interpolation of fields suitable for plotting
  187.      call gyro_field_plot
  188.    
  189.      ! Compute gyro_u needed for gyro_moments_plot
  190.      call gyro_field_interpolation
  191.    
  192.      ! Generate data for moments plot
  193.      call gyro_moments_plot
  194.    
  195.      if (i_proc == 0 .and. debug_flag == 1) then
  196.         print *,'[gyro_initial_condition done]' 
  197.      endif
  198.    
  199.    end subroutine gyro_initial_condition


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_INITIAL_CONDITION (Line 142, file gyro_initial_condition.f90)

Name  Messages
----  --------
CHAR(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
COS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_INITIAL_CONDITION (Line 118, file gyro_initial_condition.f90)
                   GYRO_INITIAL_CONDITION (Line 121, file gyro_initial_condition.f90)

Name  Messages
----  --------
GYRO_FIELD_INTERPOLATION
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_FIELD_PLOT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_FIELD_SOLVE_EXPLICIT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_GLOBALS
      Defined as:  No definitions.

      Used By:     GYRO_INITIAL_CONDITION

Name  Messages
----  --------
GYRO_INITIAL_CONDITION
      Defined as:  Subroutine (line 14, file gyro_initial_condition.f90)

      Interface:   None

      Calls:       SQRT(Intrinsic) (Line 42, file gyro_initial_condition.f90)
                   SIN(Intrinsic) (Line 80, file gyro_initial_condition.f90)
                   SIN(Intrinsic) (Line 89, file gyro_initial_condition.f90)
                   SIN(Intrinsic) (Line 121, file gyro_initial_condition.f90)
                   COS(Intrinsic) (Line 118, file gyro_initial_condition.f90)
                   COS(Intrinsic) (Line 121, file gyro_initial_condition.f90)
                   ABS(Intrinsic) (Line 142, file gyro_initial_condition.f90)

        Uses:      GYRO_GLOBALS
                   GYRO_POINTERS
                   MATH_CONSTANTS

Name  Messages
----  --------
GYRO_MOMENTS_PLOT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_POINTERS
      Defined as:  No definitions.

      Used By:     GYRO_INITIAL_CONDITION

Name  Messages
----  --------
MATH_CONSTANTS
      Defined as:  No definitions.

      Used By:     GYRO_INITIAL_CONDITION

Name  Messages
----  --------
SIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_INITIAL_CONDITION (Line 80, file gyro_initial_condition.f90)
                   GYRO_INITIAL_CONDITION (Line 89, file gyro_initial_condition.f90)
                   GYRO_INITIAL_CONDITION (Line 121, file gyro_initial_condition.f90)

Name  Messages
----  --------
SQRT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_INITIAL_CONDITION (Line 42, file gyro_initial_condition.f90)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
