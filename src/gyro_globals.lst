%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /global/u2/b/bassem/gyro-EP/src/gyro_globals.f90
Compiled : 01/19/21  15:35:24
Compiler : Version 9.1.0
Ftnlx    : Version 9.1.0 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hdynamic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -hnoomp -em
           -J/global/homes/b/bassem/gyro-EP/modules -sreal64 -eD -Ktrap=fp -m1
           -Rbcdps -G0 -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -c gyro_globals.f90
           -I/opt/cray/pe/cce/9.1.0/cce-clang/x86_64/lib/clang/9.0.0/include
           -I/opt/cray/pe/cce/9.1.0/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -I/opt/cray/pe/libsci/19.06.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.10/gni/mpich-cray/9.0/include
           -I/opt/cray/pe/hdf5/1.10.5.2/cray/9.0/include
           -I/opt/cray/pe/netcdf/4.6.3.2/cray/9.0/include
           -I/opt/cray/rca/2.2.20-7.0.1.1_4.53__g8e3fb5b.ari/include
           -I/opt/cray/alps/6.6.58-7.0.1.1_6.10__g437d88db.ari/include
           -I/opt/cray/xpmem/2.2.20-7.0.1.1_4.14__g0475745.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-7.0.1.1_6.32__g3b1768f.ari/include
           -I/opt/cray/dmapp/7.1.1-7.0.1.1_4.54__g38cf134.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/ugni/6.0.14.0-7.0.1.1_7.40__ge78e5b0.ari/include
           -I/opt/cray/udreg/2.3.2-7.0.1.1_3.38__g8175d3d.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.1.1_4.16__g7109084.ari/include
           -I/opt/cray/krca/2.2.6-7.0.1.1_5.39__gb641b12.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
Program
  Units  : GYRO_GLOBALS

ftnlx report
------------
Source   : /global/u2/b/bassem/gyro-EP/src/gyro_globals.f90
Date     : 01/19/2021  15:35:24


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !-----------------------------------------------------
    2.    ! gyro_globals.f90
    3.    !
    4.    ! PURPOSE:
    5.    !  Fundamental module containing most of the shared 
    6.    !  GYRO variables and arrays
    7.    !-----------------------------------------------------
    8.    
    9.    module gyro_globals
   10.    
   11.      !----------------------------------------------------
   12.      ! Standard precision for IO 
   13.      !
   14.      ! Real
   15.      character(len=8) :: fmtstr='(es11.4)'
   16.      ! Complex
   17.      character(len=14) :: fmtstr2='(2(es11.4,1x))'
   18.      !----------------------------------------------------
   19.    
   20.      !----------------------------------------------------
   21.      ! Variables passed in via gyro_run routine:
   22.      !
   23.      ! Signal trivial test run (rather than full simulation)
   24.      integer :: gyrotest_flag
   25.      ! (0=new,1=restart,2=restart-but-don't-write-restart-data)
   26.      integer :: restart_method
   27.      ! (1=standard, 2=time reset for transport analysis, 3=no time reset for transport analysis)
   28.      integer :: transport_method
   29.      !----------------------------------------------------
   30.    
   31.      integer :: gyro_exit_status
   32.      character(len=80) :: gyro_exit_message
   33.    
   34.      !---------------------------------------------------------
   35.      ! CPU timers
   36.      !
   37.      real, dimension(64) :: cpu
   38.      real, dimension(64) :: cpu_in
   39.      character(len=19), dimension(64) :: cpu_tag
   40.      integer :: cpu_maxindx
   41.      real :: startup_time
   42.      !---------------------------------------------------------
   43.      !---------------------------------------------------------
   44.      ! Restart parameters:
   45.      !
   46.      ! (input)
   47.      !
   48.      integer :: restart_new_flag
   49.      integer :: restart_data_skip
   50.      integer :: eigensolve_restart_flag
   51.      !
   52.      ! (working)
   53.      !
   54.      integer :: i_restart
   55.      !---------------------------------------------------------
   56.    
   57.      !---------------------------------------------------------
   58.      ! Set this flag to unity if subgrouping
   59.      ! is to be used (suggested).
   60.      !
   61.      integer, parameter :: USE_SUBGROUP = 1
   62.      !---------------------------------------------------------
   63.    
   64.      !---------------------------------------------------------
   65.      ! Unit for restart files:
   66.      !
   67.      integer, parameter :: io_restart = 2
   68.      !---------------------------------------------------------
   69.    
   70.      !---------------------------------------------------------
   71.      ! Length of entropy vector, entropy(:)
   72.      !
   73.      integer, parameter :: n_entro=5
   74.      !------------------------------------------------------
   75.    
   76.      !------------------------------------------------------
   77.      ! Run file:
   78.      !
   79.      character(len=80), parameter :: baserunfile = 'out.gyro.run'
   80.      character(len=80) :: runfile = baserunfile
   81.      !---------------------------------------------------------
   82.    
   83.      !---------------------------------------------------------
   84.      ! Precision file
   85.      !
   86.      character (len=80), parameter :: baseprecfile ='out.gyro.prec'
   87.      character (len=80) :: precfile = baseprecfile
   88.      !---------------------------------------------------------
   89.    
   90.      !---------------------------------------------------------
   91.      ! IO control variable:
   92.      ! 
   93.      ! 0=no IO
   94.      ! 1=Open/replace
   95.      ! 2=Append
   96.      ! 3=Rewind
   97.      !
   98.      integer :: io_control
   99.      !---------------------------------------------------------
  100.    
  101.      !---------------------------------------------------------
  102.      ! Path to INPUT, read in the get_inputpath subroutine
  103.      !
  104.      character(len=80) :: path
  105.      !---------------------------------------------------------
  106.    
  107.      !---------------------------------------------------------
  108.      ! Newline characters:
  109.      !
  110.      character(len=*), parameter :: new_line = char(13)//char(10)
  111.      character(len=*), parameter :: separator = &
  112.           '-----------------------------------------------'
  113.      !---------------------------------------------------------
  114.    
  115.      !--------------------------------------------------
  116.      ! Proton mass in kg:
  117.      !
  118.      real, parameter :: kg_proton = 1.6726e-27
  119.      !--------------------------------------------------
  120.    
  121.      !---------------------------------------------------------
  122.      ! Restart files:
  123.      !
  124.      ! in read_restart:
  125.      !
  126.      character(len=9), dimension(0:1), parameter :: &
  127.           file_restart = (/ &
  128.           "RESTART_0",&
  129.           "RESTART_1" &
  130.           /)
  131.      !
  132.      ! tag files for read_restart:
  133.      !
  134.      character(len=13), dimension(0:1), parameter :: &
  135.           file_tag_restart = (/ &
  136.           "RESTART_tag_0",&
  137.           "RESTART_tag_1" &
  138.           /)
  139.      !
  140.      ! in read_eq_restart:
  141.      !
  142.      character(len=12), dimension(0:1), parameter :: &
  143.           file_eq_restart = (/ &
  144.           "RESTART_eq_0",&
  145.           "RESTART_eq_1" &
  146.           /)
  147.      !---------------------------------------------------------
  148.    
  149.      !---------------------------------------------------------
  150.      ! Algorithm selectors:
  151.      !
  152.      ! (a) methods (values 1,2,...)
  153.      !
  154.      integer :: time_method
  155.      integer :: boundary_method 
  156.      integer :: electron_method
  157.      integer :: radial_profile_method
  158.      integer :: geometry_method
  159.      integer :: nonuniform_grid_flag
  160.      integer :: nonlinear_transfer_flag
  161.      integer :: density_method
  162.      integer :: integrator_method
  163.      integer :: nl_method
  164.      integer :: lindiff_method
  165.      integer :: gyro_method
  166.      integer :: sparse_method
  167.      integer :: linsolve_method 
  168.      integer :: fieldeigen_root_method
  169.      integer :: gkeigen_method
  170.      integer :: truncation_method
  171.      !
  172.      ! (b) flags (0 or 1)
  173.      !
  174.      integer :: nonlinear_flag 
  175.      integer :: collision_flag
  176.      integer :: krook_flag
  177.      integer :: verbose_flag
  178.      integer :: debug_flag
  179.      integer :: flat_profile_flag
  180.      integer :: trapdiff_flag
  181.      integer :: kill_i_parallel_flag
  182.      integer :: kill_i_drift_flag
  183.      integer :: kill_e_drift_flag
  184.      integer :: kill_coll_flag
  185.      integer :: kill_gyro_b_flag
  186.      integer :: velocity_output_flag
  187.      integer :: geo_array_print_flag
  188.      integer :: source_flag
  189.      integer :: dist_print
  190.      integer :: udsymmetry_flag
  191.      integer :: silent_flag
  192.      integer :: eparallel_plot_flag
  193.      integer :: entropy_flag
  194.      integer :: num_equil_flag
  195.      integer :: gkeigen_matrixonly
  196.      integer :: gkeigen_mwrite_flag
  197.      integer :: plot_u_flag
  198.      integer :: plot_epar_flag
  199.      integer :: plot_n_flag
  200.      integer :: plot_e_flag
  201.      integer :: plot_v_flag
  202.      integer :: poisson_z_eff_flag
  203.      integer :: z_eff_method
  204.      integer :: geo_gradbcurv_flag
  205.      integer :: geo_fastionbeta_flag
  206.      integer :: fakefield_flag
  207.      integer :: reintegrate_flag
  208.      integer :: ic_method
  209.      integer :: zf_test_flag
  210.      integer :: lock_ti_flag
  211.      integer :: huge_restart
  212.      !---------------------------------------------------------
  213.    
  214.      !-----------------------------------------------------------------------------------
  215.      ! Gyrokinetic eigensolver (GKEIGEN) parameters: 
  216.      !
  217.      ! Degree of secondary parallelization.
  218.      integer :: gkeigen_proc_mult
  219.      !
  220.      ! Target eigenvalues for GKEIGEN_METHOD = 5 or 6
  221.      real :: gkeigen_omega_target
  222.      real :: gkeigen_gamma_target
  223.      !
  224.      ! Number of eigenvalues to find
  225.      integer :: gkeigen_n_values
  226.      !
  227.      ! Maximum Krylov subspace dimension
  228.      integer :: gkeigen_kspace_dim      
  229.      !
  230.      ! Maximum number of iterations of Rayleigh-Ritz algorithm
  231.      integer :: gkeigen_iter   
  232.      !
  233.      ! Total length of state vectors
  234.      integer :: h_length     
  235.      !
  236.      ! Local length and width of state vector
  237.      integer :: h_length_loc
  238.      integer :: h_width_loc 
  239.      integer :: h_length_block
  240.      integer :: h_length_block_t
  241.      integer :: seq_length  ! Number of elements in passed matrix block
  242.      integer :: seq_length_t
  243.      !
  244.      ! Absolute tolerance in eigenvector solution
  245.      real :: gkeigen_tol       
  246.      !
  247.      ! For added parallelization layer (gkeigen_proc_mult > 1)
  248.      integer :: gkeigen_j_set
  249.      integer :: j_proc_tot
  250.      integer :: n_proc_tot
  251.      !
  252.      !-----------------------------------------------------------------------------------
  253.    
  254.      !-----------------------------------------------------------------------------------
  255.      ! Field eigensolver (fieldeigen) parameters
  256.      !
  257.      real :: fieldeigen_wr
  258.      real :: fieldeigen_wi
  259.      real :: fieldeigen_tol
  260.      !-----------------------------------------------------------------------------------
  261.    
  262.      !---------------------------------------------------------
  263.      ! Grid dimensions:
  264.      !
  265.      integer :: n_x
  266.      integer :: n_x_offset
  267.      integer :: n_theta_section
  268.      integer :: n_blend
  269.      integer :: n_interval
  270.      integer :: n_theta_plot
  271.      integer :: n_theta_mult
  272.      integer :: n_theta_int
  273.      integer :: blend_fit_order
  274.      integer :: n_stack 
  275.      integer :: n_field
  276.      integer :: nint_ORB_s
  277.      integer :: nint_ORB_do
  278.      integer :: n_mumps_max
  279.      integer :: n_study
  280.      !
  281.      real :: energy_max
  282.      real :: box_multiplier
  283.      real :: l_x
  284.      real :: l_y
  285.      !
  286.      integer :: n_ref
  287.      integer :: n_lambda
  288.      integer :: n_pass
  289.      integer :: n_trap
  290.      integer :: n_energy
  291.      integer :: n_n
  292.      integer :: n_n_1
  293.      integer :: n0
  294.      integer :: d_n
  295.      integer :: n_max
  296.      integer :: n_moment
  297.      integer :: p_moment
  298.      integer :: n_substep
  299.      !
  300.      integer :: n_lump
  301.      integer :: ord_rbf
  302.      integer :: n_coll
  303.      integer :: n_rbf
  304.      !
  305.      ! Species 
  306.      ! - we always have n_spec = n_ion+1
  307.      ! - with adiabatic electrons, n_kinetic = n_ion
  308.      ! - with kinetic electrons, n_kinetic = n_spec
  309.      ! - indx_e is the electron index
  310.      !
  311.      integer :: n_spec
  312.      integer :: n_ion
  313.      integer :: n_kinetic
  314.      integer :: n_gk
  315.      integer :: indx_e
  316.      integer :: n_grid_exp
  317.      !---------------------------------------------------------
  318.    
  319.      !---------------------------------------------------------
  320.      ! Loop indices (we try to be consistent)
  321.      !
  322.      ! Radius
  323.      integer :: i
  324.      integer :: ip
  325.      integer :: i_diff
  326.      !
  327.      ! Energy
  328.      integer :: ie
  329.      integer :: k 
  330.      !
  331.      ! Pitch angle
  332.      integer :: ck
  333.      !
  334.      ! Blending index
  335.      integer :: j
  336.      integer :: jp
  337.      !
  338.      ! Orbit time
  339.      integer :: m
  340.      integer :: m0
  341.      !
  342.      ! Interpolated theta index
  343.      integer :: j_int
  344.      !
  345.      ! Species
  346.      integer :: is
  347.      !
  348.      ! Toroidal mode number
  349.      integer :: in
  350.      integer :: in_1
  351.      !
  352.      ! Field
  353.      integer :: ix
  354.      !---------------------------------------------------------
  355.    
  356.      !---------------------------------------------------------
  357.      ! Field matrices/dimensions for maxwell solve:
  358.      !
  359.      integer :: n_maxwell
  360.      integer :: n_maxwell_row
  361.      !
  362.      complex, allocatable, target, dimension(:) :: m_maxwell
  363.      integer, allocatable, target, dimension(:) :: indx_maxwell
  364.      !
  365.      ! Field matrices/dimensions for collision-Ampere solve:
  366.      !
  367.      integer :: n_ampere
  368.      integer :: n_ampere_row
  369.      !
  370.      complex, allocatable, target, dimension(:) :: m_ampere
  371.      integer, allocatable, target, dimension(:) :: indx_ampere
  372.      !
  373.      integer :: n_poisson
  374.      integer :: n_poisson_row
  375.      !
  376.      complex, allocatable, target, dimension(:) :: m_poisson
  377.      integer, allocatable, target, dimension(:) :: indx_poisson
  378.      !
  379.      integer :: n_poissonaperp
  380.      integer :: n_poissonaperp_row
  381.      !
  382.      complex, allocatable, target, dimension(:) :: m_poissonaperp
  383.      integer, allocatable, target, dimension(:) :: indx_poissonaperp
  384.      !
  385.      complex, dimension(:,:,:), allocatable :: coll_vel
  386.      complex, dimension(:,:,:), allocatable :: coll_vel_perp1, coll_vel_perp2
  387.      !
  388.      complex, pointer, dimension(:) :: m_sparse
  389.      integer, pointer, dimension(:) :: indx_sparse
  390.      !
  391.      integer, dimension(4) :: lvalue
  392.      integer, dimension(4) :: lindx
  393.      !---------------------------------------------------------
  394.    
  395.      !---------------------------------------------------------
  396.      ! Maxwell blending-function expansion coefficients:
  397.      !
  398.      complex, allocatable, dimension(:,:,:) :: field_blend
  399.      complex, allocatable, dimension(:,:,:) :: field_blend_old
  400.      complex, allocatable, dimension(:,:,:) :: field_blend_old2
  401.      complex, allocatable, dimension(:,:,:) :: field_blend_dot
  402.      !--------------------------------------------------------
  403.    
  404.      !---------------------------------------------------------
  405.      ! Maxwell blending-function matrices:
  406.      !
  407.      integer, allocatable, dimension(:,:,:) :: ff_mm_piv
  408.      complex, allocatable, dimension(:,:,:,:) :: ff_mm
  409.      integer, allocatable, dimension(:,:) :: ff2_mm_piv
  410.      complex, allocatable, dimension(:,:,:) :: ff2_mm
  411.      !
  412.      complex, allocatable, dimension(:,:,:,:) :: ap_mm
  413.      complex, allocatable, dimension(:,:,:,:) :: aa_mm
  414.      complex, allocatable, dimension(:,:,:,:) :: ab_mm
  415.      complex, allocatable, dimension(:,:,:,:) :: abp_mm
  416.    
  417.      !
  418.      complex, dimension(:,:,:,:), allocatable :: cs_blend
  419.      complex, dimension(:,:,:,:), allocatable :: c_blend
  420.      !
  421.      complex, dimension(:,:,:,:), allocatable :: cs_blend_prime
  422.      !
  423.      complex, dimension(:,:,:), allocatable :: blend_plot
  424.      complex, dimension(:,:,:), allocatable :: blend_prime_plot
  425.      !---------------------------------------------------------
  426.    
  427.      !---------------------------------------------------------
  428.      ! Timestep parameters:
  429.      !
  430.      integer :: step
  431.      integer :: nstep
  432.      integer :: data_step
  433.      integer :: time_skip
  434.      integer :: alltime_index
  435.      integer :: output_flag
  436.      integer :: p_ave
  437.      !
  438.      real :: time_max
  439.      real :: freq_tol
  440.      real :: freq_err
  441.      real :: fluxaverage_window
  442.      !
  443.      real :: plot_filter
  444.      real :: dt
  445.      real :: t_current
  446.      !
  447.      real, dimension(:), allocatable :: w_time
  448.      !
  449.      complex, dimension(:,:), allocatable :: omega_linear
  450.      ! 
  451.      real, dimension(:), allocatable :: time_error
  452.      !---------------------------------------------------------
  453.    
  454.      !---------------------------------------------------------
  455.      ! Radial boundary parameters:
  456.      !
  457.      integer, dimension(:), allocatable :: i_cyc
  458.      integer, dimension(:), allocatable :: i_loop
  459.      !
  460.      integer :: i1_buffer
  461.      integer :: i2_buffer
  462.      !
  463.      integer :: i1_dx
  464.      integer :: i2_dx
  465.      !
  466.      integer :: n_explicit_damp
  467.      !
  468.      real :: explicit_damp
  469.      real :: explicit_damp_elec
  470.      real, dimension(:,:), allocatable :: explicit_damp_vec
  471.      !---------------------------------------------------------
  472.    
  473.      !---------------------------------------------------------
  474.      ! Radial grid parameters
  475.      !
  476.      integer :: m_dx
  477.      integer :: mg_dx
  478.      integer :: m_gyro
  479.      integer :: i_dx
  480.      integer :: ig_dx
  481.      integer :: i_gyro
  482.      integer :: ir_norm
  483.      !
  484.      integer :: n_source
  485.      !
  486.      real :: d_x
  487.      real :: radial_upwind
  488.      !
  489.      complex, dimension(:,:), allocatable :: cr
  490.      complex, dimension(:,:), allocatable :: cri
  491.      !
  492.      ! Source basis functions, coupling matrix and pivots:
  493.      !
  494.      real, dimension(:,:), allocatable :: b_src
  495.      real, dimension(:,:), allocatable :: m_src
  496.      integer, dimension(:), allocatable :: src_piv
  497.      !---------------------------------------------------------
  498.    
  499.      !---------------------------------------------------------
  500.      ! Radial operators:
  501.      !
  502.      complex, dimension(:), allocatable :: w_g0
  503.      complex, dimension(:), allocatable :: w_d0
  504.      complex, dimension(:), allocatable :: w_gd0
  505.      complex, dimension(:), allocatable :: w_d1
  506.      complex, dimension(:), allocatable :: w_d2
  507.      !
  508.      real, dimension(:), allocatable :: s_d1
  509.      real, dimension(:,:), allocatable :: gyro_trace
  510.      !
  511.      ! Gyroaverage operators 
  512.      ! (G0a,G1a,G2a,G3a in Technical Guide)
  513.      complex, dimension(:,:,:,:,:), allocatable :: w_gyro0
  514.      complex, dimension(:,:,:,:,:), allocatable :: w_gyro1
  515.      complex, dimension(:,:,:,:,:), allocatable :: w_gyro2
  516.      complex, dimension(:,:,:,:,:), allocatable :: w_gyro3
  517.      !---------------------------------------------------------
  518.    
  519.      !---------------------------------------------------------
  520.      ! Toroidal grid parameters:
  521.      !
  522.      integer, dimension(:), allocatable :: n
  523.      integer, dimension(:), allocatable :: n_1 
  524.      !---------------------------------------------------------
  525.    
  526.      !---------------------------------------------------------
  527.      ! Orbit grid arrays and parameters:
  528.      !
  529.      integer, parameter :: n_class = 2
  530.      !
  531.      integer, dimension(n_class) :: n_theta
  532.      integer, dimension(n_class) :: n_tau
  533.      !
  534.      real, dimension(n_class)    :: d_tau
  535.      real, dimension(n_class,2)  :: sigma
  536.      real, dimension(n_class,2)  :: sigma_tau
  537.      !
  538.      integer, dimension(:), allocatable :: class
  539.      !
  540.      real, dimension(:,:,:), allocatable :: theta_t
  541.      real, dimension(:,:,:), allocatable :: b0_t
  542.      real, dimension(:,:,:), allocatable :: g_theta_t
  543.      real, dimension(:,:,:), allocatable :: grad_r_t
  544.      real, dimension(:,:,:), allocatable :: qrat_t
  545.      real, dimension(:,:,:), allocatable :: cos_t
  546.      real, dimension(:,:,:), allocatable :: cos_p_t
  547.      real, dimension(:,:,:), allocatable :: captheta_t
  548.      real, dimension(:,:,:), allocatable :: sin_t
  549.      real, dimension(:,:,:), allocatable :: usin_t
  550.      real, dimension(:,:,:), allocatable :: ucos_t
  551.      !
  552.      real, dimension(:,:,:), allocatable :: bt_t
  553.      real, dimension(:,:,:), allocatable :: bp_t
  554.      real, dimension(:,:,:), allocatable :: bigr_t
  555.      !
  556.      real, dimension(:,:,:), allocatable :: tau
  557.      !
  558.      integer, dimension(:,:,:), allocatable :: m_cyc
  559.      complex, dimension(:,:,:,:), allocatable :: p_cyc
  560.      !
  561.      integer, dimension(:,:), allocatable :: m_phys
  562.      integer, dimension(:,:), allocatable :: p_phys
  563.      !
  564.      real, dimension(:,:), allocatable :: omega
  565.      !
  566.      integer, dimension(:,:,:), allocatable :: m_map
  567.      !
  568.      real, dimension(:,:), allocatable :: c_fluxave
  569.      !
  570.      real :: d_theta
  571.      !
  572.      ! Implicit advection arrays and parameters
  573.      !
  574.      real :: a_SDIRK
  575.      !
  576.      complex, dimension(:,:,:,:), allocatable :: o_f
  577.      complex, dimension(:,:,:,:), allocatable :: o_fv
  578.      complex, dimension(:,:,:,:), allocatable :: imp
  579.      complex, dimension(:,:,:,:), allocatable :: o_advect
  580.      !---------------------------------------------------------
  581.    
  582.      !---------------------------------------------------------
  583.      ! Lambda/energy grid variables:
  584.      !
  585.      real, allocatable, dimension(:) :: energy
  586.      real, allocatable, dimension(:) :: w_energy
  587.      !
  588.      real, allocatable, dimension(:,:) :: lambda
  589.      real, allocatable, dimension(:) :: s_lambda
  590.      real, allocatable, dimension(:,:) :: w_lambda
  591.      !
  592.      real, allocatable, dimension(:,:,:) :: w_p
  593.      !
  594.      real, allocatable, dimension(:) :: lambda_tp
  595.      real, allocatable, dimension(:) :: lambda_max
  596.      !---------------------------------------------------------
  597.    
  598.      !---------------------------------------------------------
  599.      ! Equilibrium specification parameters:
  600.      !
  601.      real :: a_meters
  602.      !
  603.      real :: q0
  604.      real :: s0
  605.      !
  606.      real :: ipccw
  607.      real :: btccw
  608.      !
  609.      real :: r_norm
  610.      real :: q_norm
  611.      real :: shat_norm
  612.      real :: rhos_norm
  613.      real :: csda_norm
  614.      real :: tem_norm
  615.      real :: den_norm
  616.      real :: r_maj_norm
  617.      real :: b_unit_norm
  618.      real :: betae_unit_norm
  619.      real :: betai_unit_norm
  620.      !   
  621.      ! Local profile parameters
  622.      ! 
  623.      real :: kappa0
  624.      real :: s_kappa0
  625.      real :: delta0
  626.      real :: zeta0
  627.      real :: s_delta0
  628.      real :: s_zeta0
  629.      real :: drmaj0
  630.      real :: zmag0
  631.      real :: dzmag0
  632.      real :: alpha_mhd0
  633.      real :: pgamma0
  634.      real :: mach0
  635.      real :: r_maj
  636.      real :: r0
  637.      real :: x_length
  638.      real :: rho_star
  639.      real :: z_eff
  640.      real :: betae_unit
  641.      real :: ampere_scale
  642.      real :: geo_betaprime_scale
  643.      real :: gamma_e
  644.      real :: lambda_debye_scale
  645.      real :: lambda_debye
  646.      !---------------------------------------------------------
  647.    
  648.      !---------------------------------------------------------
  649.      ! Local profile input parameters
  650.      !  
  651.      ! ln_vec -> L_n
  652.      ! lt_vec -> L_T
  653.      !  t_vec -> T
  654.      !  n_vec -> n
  655.      !  z_vec -> Z
  656.      !
  657.      ! index 0 -> electron
  658.      ! index 1 -> ion 1
  659.      ! etc.
  660.      !
  661.      real :: dlnndr_vec(0:10)
  662.      real :: dlntdr_vec(0:10)
  663.      real :: eps_dlnndr_vec(0:10)
  664.      real :: eps_dlntdr_vec(0:10)
  665.      real :: n_vec(0:10)
  666.      real :: t_vec(0:10)
  667.      real :: z_vec(0:10)
  668.      real :: orbit_upwind_vec(0:10) 
  669.      !
  670.      ! mu_i = sqrt(m(1)/m(i))
  671.      !
  672.      real ::  mu_vec(0:10)
  673.      !
  674.      real, dimension(:,:), allocatable :: krho_i
  675.      real, dimension(:), allocatable :: z
  676.      real, dimension(:), allocatable :: mu
  677.      !
  678.      real :: nu_ei
  679.      real :: nu_ei_scale
  680.      real :: nu_ii_scale
  681.      real :: nu_i_krook
  682.      !
  683.      real :: s_grid
  684.      !
  685.      ! Scales experimental ExB
  686.      real :: doppler_scale
  687.      ! 
  688.      ! Scales experimental q-profile but preserves s
  689.      real :: q_scale 
  690.      !
  691.      ! Scales experimental pgamma  
  692.      real :: pgamma0_scale
  693.      !
  694.      ! Scales experimental  mach 
  695.      real :: mach0_scale
  696.      !
  697.      ! Geometry Fourier coefficients
  698.      integer :: n_fourier_geo
  699.      real, dimension(8,0:32) :: a_fourier_geo
  700.      !---------------------------------------------------------
  701.    
  702.      !---------------------------------------------
  703.      ! Profile functions:  
  704.      !
  705.      ! These are "special" values which retain spatial 
  706.      ! variation for a flux-tube run:
  707.      !
  708.      real, dimension(:), allocatable :: r 
  709.      real, dimension(:), allocatable :: q
  710.      !
  711.      ! These get flattened like all other _s profiles
  712.      ! in a flux-tube run
  713.      !
  714.      real, dimension(:), allocatable :: q_s 
  715.      real, dimension(:), allocatable :: r_s 
  716.      !
  717.      real, dimension(:), allocatable :: rmaj_s
  718.      real, dimension(:), allocatable :: rhogrid_s 
  719.      real, dimension(:), allocatable :: kappa_s 
  720.      real, dimension(:), allocatable :: s_kappa_s 
  721.      real, dimension(:), allocatable :: delta_s  
  722.      real, dimension(:), allocatable :: zeta_s  
  723.      real, dimension(:), allocatable :: s_delta_s 
  724.      real, dimension(:), allocatable :: s_zeta_s 
  725.      real, dimension(:), allocatable :: z_eff_s 
  726.      real, dimension(:), allocatable :: b_unit_s
  727.      real, dimension(:), allocatable :: rhosda_s 
  728.      real, dimension(:), allocatable :: csda_s  
  729.      real, dimension(:), allocatable :: drmaj_s 
  730.      real, dimension(:), allocatable :: zmag_s
  731.      real, dimension(:), allocatable :: dzmag_s 
  732.      real, dimension(:), allocatable :: shat_s 
  733.      real, dimension(:), allocatable :: beta_unit_s 
  734.      real, dimension(:), allocatable :: beta_unit_ptot_s
  735.      real, dimension(:), allocatable :: w0_s
  736.      real, dimension(:), allocatable :: w0p_s
  737.      real, dimension(:), allocatable :: gamma_e_s
  738.      real, dimension(:), allocatable :: gamma_p_s
  739.      real, dimension(:), allocatable :: mach_s
  740.      !
  741.      real, dimension(:), allocatable :: omega_eb_s
  742.      real, dimension(:), allocatable :: dlnpdr_s
  743.      real, dimension(:), allocatable :: dlnptotdr_s
  744.      real, dimension(:), allocatable :: beta_star_s
  745.      !
  746.      real, dimension(:,:), allocatable :: den_s 
  747.      real, dimension(:,:), allocatable :: tem_s
  748.      real, dimension(:,:), allocatable :: dlnndr_s 
  749.      real, dimension(:,:), allocatable :: dlntdr_s 
  750.      real, dimension(:,:), allocatable :: alpha_s
  751.      real, dimension(:,:), allocatable :: nu_s   
  752.      real, dimension(:,:), allocatable :: pr_s
  753.      real, dimension(:), allocatable :: ptot_s
  754.      !
  755.      complex, dimension(:,:), allocatable :: phase
  756.      real, dimension(:), allocatable :: angp
  757.      !
  758.      ! nonuniform_grid_flag variables:
  759.      !
  760.      real, dimension(:), allocatable :: r_e
  761.      real, dimension(:), allocatable :: dr_eodr
  762.      !
  763.      ! General geometry Fourier coefficients
  764.      !
  765.      real, dimension(:,:,:), allocatable :: a_fourier_geo_s
  766.      !----------------------------------------------
  767.    
  768.      !---------------------------------------------------------
  769.      ! Field and field coefficients:
  770.      !
  771.      real, dimension(:), allocatable :: phi_squared
  772.      real, dimension(:,:), allocatable :: field_fluxave
  773.      !
  774.      complex, dimension(:,:,:,:), allocatable :: field_tau
  775.      complex, dimension(:,:,:,:), allocatable :: field_tau_old
  776.      complex, dimension(:,:,:,:), allocatable :: field_tau_old2
  777.      !
  778.      complex, dimension(:,:,:), allocatable :: phi
  779.      complex, dimension(:,:,:), allocatable :: phi_plot
  780.      real, dimension(:,:), allocatable :: ave_phi
  781.      !
  782.      complex, dimension(:,:,:,:), allocatable :: moments_plot
  783.      real, dimension(:,:,:), allocatable :: moments_zero_plot
  784.      !
  785.      real, dimension(:,:), allocatable :: b0_plot
  786.      real, dimension(:,:), allocatable :: g_theta_plot   
  787.      !
  788.      ! Work arrays
  789.      !
  790.      complex, allocatable, dimension(:,:) :: vel_sum_p
  791.      complex, allocatable, dimension(:,:) :: vel_sum_a
  792.      complex, allocatable, dimension(:,:) :: vel_sum_aperp
  793.      ! 
  794.      ! Normalization
  795.      !
  796.      complex :: balloon_renorm
  797.      !
  798.      ! Initial amplitudes (see gyro_initial_condition)
  799.      !
  800.      real :: amp_n
  801.      real :: amp_0
  802.      real :: amp_study
  803.      !---------------------------------------------------------
  804.    
  805.      !---------------------------------------------------------
  806.      ! Gyroaverage of h_i
  807.      !
  808.      complex, dimension(:,:,:,:), allocatable :: gyro_h
  809.      complex, dimension(:,:,:,:), allocatable :: gyro_h_aperp
  810.      !---------------------------------------------------------
  811.    
  812.      !---------------------------------------------------------
  813.      ! Arrays connected with distribution function:
  814.      !
  815.      complex, dimension(:,:,:,:), allocatable :: h_err
  816.      complex, dimension(:,:,:,:), allocatable :: h_0
  817.      complex, dimension(:,:,:,:), allocatable :: h_old
  818.      complex, dimension(:,:,:,:), allocatable :: h
  819.      complex, dimension(:,:,:,:), allocatable :: h_cap
  820.      complex, dimension(:,:,:,:), allocatable :: h_cap_old
  821.      complex, dimension(:,:,:,:), allocatable :: h_cap_old2
  822.      complex, dimension(:,:,:,:), allocatable :: h_cap_dot
  823.      complex, dimension(:,:,:,:), allocatable :: rhs
  824.    
  825.      complex, dimension(:,:,:,:), allocatable :: f_store
  826.      complex, dimension(:,:,:,:), allocatable :: p_store
  827.      !
  828.      complex, dimension(:,:,:,:), allocatable :: h_tran
  829.      complex, dimension(:,:,:), allocatable :: h_c
  830.      complex, dimension(:,:,:), allocatable :: f_coll
  831.      complex, dimension(:,:,:), allocatable :: fb_coll
  832.      !
  833.      ! Various averages of field quantities:
  834.      !
  835.      complex, dimension(:,:,:,:,:), allocatable :: gyro_uv
  836.      complex, dimension(:,:,:,:,:), allocatable :: kyro_uv
  837.      complex, dimension(:,:,:,:,:), allocatable :: gyro_uv_old2
  838.      complex, dimension(:,:,:,:,:), allocatable :: gyro_uv_old
  839.      complex, dimension(:,:,:,:,:), allocatable :: gyro_uv_dot
  840.      complex, dimension(:,:,:,:), allocatable :: gyro_u
  841.      complex, dimension(:,:,:,:), allocatable :: gyro_u_tran
  842.      !
  843.      complex, dimension(:,:,:), allocatable :: rhs_krook
  844.      !
  845.      ! Collision operator
  846.      !
  847.      real :: condition_number
  848.      real, dimension(:,:,:,:), allocatable :: d_rbf
  849.      real, dimension(:,:), allocatable :: d1_rbf
  850.      complex, dimension(:,:,:,:), allocatable :: nu_op
  851.      !---------------------------------------------------------
  852.    
  853.      !---------------------------------------------------------
  854.      ! Entropy containers:
  855.      !
  856.      real, dimension(:,:), allocatable :: entropy
  857.      !
  858.      real, dimension(:,:,:,:), allocatable :: rhs_dr
  859.      real, dimension(:,:,:,:), allocatable :: rhs_dt
  860.      !---------------------------------------------------------
  861.    
  862.      !---------------------------------------------------------
  863.      ! Species velocities
  864.      !
  865.      real, allocatable, dimension(:,:,:,:) :: v_para
  866.      real, allocatable, dimension(:,:,:,:) :: v_perp
  867.      !---------------------------------------------------------
  868.    
  869.      !---------------------------------------------------------
  870.      ! Omegas:
  871.      !
  872.      real, allocatable, dimension(:,:,:,:) :: omega_d1
  873.      real, allocatable, dimension(:,:,:,:) :: omega_star
  874.      !
  875.      real, allocatable, dimension(:,:,:,:) :: omega_dr
  876.      !
  877.      real, allocatable, dimension(:,:,:,:) :: v_theta
  878.      real, allocatable, dimension(:) :: theta_int
  879.      real, allocatable, dimension(:) :: theta_plot
  880.      real, allocatable, dimension(:) :: theta_r0_plot
  881.      !
  882.      real, allocatable, dimension(:,:,:) :: lambda_b
  883.      !---------------------------------------------------------
  884.    
  885.      !----------------------------------------------
  886.      ! kx-ky spectrum
  887.      !
  888.      real, dimension(:), allocatable :: kxkyspec
  889.      real, dimension(:), allocatable :: k_perp_squared
  890.      !----------------------------------------------
  891.    
  892.      !------------------------------------------------
  893.      ! Primitive fluxes:
  894.      !
  895.      real, dimension(:,:,:,:,:), allocatable :: nonlinear_flux_velocity
  896.      real, dimension(:,:,:,:), allocatable :: nonlinear_flux_passing
  897.      real, dimension(:,:,:,:), allocatable :: nonlinear_flux_trapped
  898.      real, dimension(:,:), allocatable :: nonlinear_flux_momparts
  899.      real, dimension(:,:), allocatable :: nonlinear_flux_excparts
  900.      !
  901.      ! gyroBohm fluxes:
  902.      !
  903.      real, dimension(:,:,:,:), allocatable :: gbflux_i
  904.      real, dimension(:,:,:,:), allocatable :: gbflux_i_trapped
  905.      real, dimension(:,:,:), allocatable :: gbflux
  906.      real, dimension(:,:), allocatable :: gbflux_mom
  907.      real, dimension(:,:), allocatable :: gbflux_exc
  908.      real, dimension(:,:,:), allocatable :: gbflux_trapped
  909.      real, dimension(:,:,:), allocatable :: gbflux_n
  910.      !
  911.      ! Nonlinear transfer and turbulent energy spectra
  912.      !
  913.      real, dimension(:,:), allocatable :: nl_transfer
  914.      !
  915.      real, dimension(:,:,:,:), allocatable :: gbflux_vec
  916.      !------------------------------------------------
  917.    
  918.      !------------------------------------------------------
  919.      ! Merged variables
  920.      !
  921.      real :: nu_source
  922.      !
  923.      real, dimension(:,:,:), allocatable :: h0_eq
  924.      real, dimension(:,:,:), allocatable :: h0_mod
  925.      !
  926.      real, dimension(:,:), allocatable :: h0_n
  927.      real, dimension(:,:), allocatable :: h0_e
  928.      real, dimension(:,:), allocatable :: source_n
  929.      real, dimension(:,:), allocatable :: source_e
  930.      !
  931.      real :: total_memory
  932.      real, dimension(:), allocatable :: krho_collect
  933.      !
  934.      complex, dimension(:,:), allocatable :: z_gyro
  935.      !
  936.      integer, dimension(:), allocatable :: c_map
  937.      !------------------------------------------------------
  938.    
  939.      !----------------------------------------------
  940.      ! LAPACK
  941.      !
  942.      integer :: info
  943.      integer, dimension(:), allocatable :: i_piv
  944.      !-----------------------------------------------
  945.    
  946.      !------------------------------------------------------
  947.      ! MPI
  948.      !
  949.      integer :: i_proc
  950.      integer :: n_proc
  951.      !
  952.      integer :: i_proc_w
  953.      !
  954.      integer :: n_proc_1
  955.      integer :: n_proc_2
  956.      !
  957.      integer :: i_proc_1
  958.      integer :: i_proc_2
  959.      !
  960.      integer :: i_group_1
  961.      integer :: i_group_2
  962.      !
  963.      integer :: GYRO_COMM_WORLD
  964.      integer :: GKEIGEN_J_SUBSET
  965.      integer :: GYRO_COMM_UNIPROC
  966.      integer :: NEW_COMM_1
  967.      integer :: NEW_COMM_2
  968.      integer :: MUMPS_COMM
  969.      !
  970.      integer :: i_err
  971.      !
  972.      integer :: msplit_SSUB
  973.      integer :: nv1_SSUB
  974.      integer :: nv2_SSUB
  975.      !
  976.      integer, dimension(:), allocatable :: recv_status
  977.      !------------------------------------------------------
  978.    
  979.      !------------------------------------------------------
  980.      ! UMFPACK control
  981.      !
  982.      real, dimension(4,10) :: cntl
  983.      real, dimension(20) :: rinfo
  984.      integer, dimension(4,20) :: icntl
  985.      integer, dimension(40) :: uinfo
  986.      integer, dimension(4,20) :: keep  
  987.      !------------------------------------------------------
  988.    
  989.    end module gyro_globals


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
CHAR(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_GLOBALS (Line 110, file gyro_globals.f90)
                   GYRO_GLOBALS (Line 110, file gyro_globals.f90)

Name  Messages
----  --------
GYRO_GLOBALS
      Defined as:  Module (line 9, file gyro_globals.f90)

      Calls:       CHAR(Intrinsic) (Line 110, file gyro_globals.f90)
                   CHAR(Intrinsic) (Line 110, file gyro_globals.f90)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
