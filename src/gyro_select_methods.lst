%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /global/u2/b/bassem/gyro-EP/src/gyro_select_methods.f90
Compiled : 01/19/21  15:35:51
Compiler : Version 9.1.0
Ftnlx    : Version 9.1.0 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hdynamic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -hnoomp -em
           -J/global/homes/b/bassem/gyro-EP/modules -sreal64 -eD -Ktrap=fp -m1
           -Rbcdps -G0 -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -c gyro_select_methods.f90
           -I/opt/cray/pe/cce/9.1.0/cce-clang/x86_64/lib/clang/9.0.0/include
           -I/opt/cray/pe/cce/9.1.0/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -I/opt/cray/pe/libsci/19.06.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.10/gni/mpich-cray/9.0/include
           -I/opt/cray/pe/hdf5/1.10.5.2/cray/9.0/include
           -I/opt/cray/pe/netcdf/4.6.3.2/cray/9.0/include
           -I/opt/cray/rca/2.2.20-7.0.1.1_4.53__g8e3fb5b.ari/include
           -I/opt/cray/alps/6.6.58-7.0.1.1_6.10__g437d88db.ari/include
           -I/opt/cray/xpmem/2.2.20-7.0.1.1_4.14__g0475745.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-7.0.1.1_6.32__g3b1768f.ari/include
           -I/opt/cray/dmapp/7.1.1-7.0.1.1_4.54__g38cf134.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/ugni/6.0.14.0-7.0.1.1_7.40__ge78e5b0.ari/include
           -I/opt/cray/udreg/2.3.2-7.0.1.1_3.38__g8175d3d.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.1.1_4.16__g7109084.ari/include
           -I/opt/cray/krca/2.2.6-7.0.1.1_5.39__gb641b12.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
Program
  Units  : GYRO_SELECT_METHODS

ftnlx report
------------
Source   : /global/u2/b/bassem/gyro-EP/src/gyro_select_methods.f90
Date     : 01/19/2021  15:35:51


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !---------------------------------------------------------------
    2.    ! gyro_select_methods.f90 [caller BigScience]
    3.    !
    4.    ! PURPOSE:
    5.    !
    6.    !  Run through all method selection parameters.  As much 
    7.    !  consistency checking as possible should be done here.
    8.    !---------------------------------------------------------------
    9.    
   10.    subroutine gyro_select_methods
   11.    
   12.      use gyro_globals
   13.      use ompdata
   14.    
   15.      !--------------------------
   16.      implicit none
   17.      character (len=40) :: mstr
   18.      !--------------------------
   19.    
   20.      !-------------------------------------------------------------
   21.      ! Various consistency and error checks
   22.      ! 
   23.      ! Grid offset checks:
   24.      !
   25.      if (n_x_offset /= 0 .and. boundary_method == 1) then
   26.         call catch_error('ERROR: (GYRO) RADIAL_GRID_OFFSET must be zero.')
   27.      endif
   28.      if (abs(n_x_offset) > n_x/2-1) then
   29.         call catch_error('ERROR: (GYRO) RADIAL_GRID_OFFSET too large.')
   30.      endif
   31.      !
   32.      ! Study mode check:
   33.      !
   34.      if (n_study < 0 .or. n_study > n_n) then
   35.         call catch_error('ERROR: (GYRO) N_STUDY out of bounds.')
   36.      endif
   37.      !
   38.      ! Toroidal grid check:
   39.      !
   40.      if (nonlinear_flag == 1 .and. n_n < 2) then
   41.         call catch_error('ERROR: (GYRO) Nonlinear runs require TOROIDAL_GRID > 1.')
   42.      endif
   43.      !
   44.      ! Distribution function print check: 
   45.      !
   46.      if (dist_print == 1) then
   47.         if  (n_n > 1) then
   48.            call catch_error('ERROR: (GYRO) DIST_PRINT_FLAG=1 requires TOROIDAL_GRID=1.')
   49.         endif
   50.         if  (n_proc > 1) then
   51.            call catch_error('ERROR: (GYRO) DIST_PRINT_FLAG=1 on one processor only.')
   52.         endif
   53.      endif
   54.      !
   55.      ! Radial grid check:
   56.      !
   57.      if (n_x < 4) then
   58.         call catch_error('ERROR: (GYRO) You must have RADIAL_GRID >= 4.')
   59.      endif
   60.      !
   61.      ! Radial gyroaverage check:
   62.      !
   63.      if (m_gyro > n_x/2) then
   64.         call catch_error('ERROR: (GYRO) RADIAL_GYRO_BAND cannot exceed half RADIAL_GRID. ')
   65.      endif
   66.      !
   67.      ! Buffer check:
   68.      !
   69.      if (boundary_method == 2 .and. n_x-2*n_explicit_damp <= 0) then
   70.         call catch_error('ERROR: (GYRO) Buffers are too large (see EXPLICIT_DAMP_GRID).')
   71.      endif
   72.      !
   73.      ! Source check:
   74.      !
   75.      if (n_source <= 0) then
   76.         call catch_error('ERROR: (GYRO) require N_SOURCE > 0.')
   77.      endif
   78.      !
   79.      ! Check for validity of transfer diagnostic
   80.      !
   81.      if (boundary_method == 2 .and. nonlinear_transfer_flag == 1) then
   82.         call catch_error('ERROR: (GYRO) Need BOUNDARY_METHOD=1 for NONLINEAR_TRANSFER_FLAG=1.')
   83.      endif
   84.      !
   85.      ! Check for solver consistency
   86.      !
   87.      if (linsolve_method > 1 .and. nonlinear_flag == 1) then
   88.         call catch_error('ERROR: (GYRO) Can only have NONLINEAR_FLAG=1 with LINSOLVE_METHOD=1.')
   89.      endif
   90.      !
   91.      if (radial_upwind < 0.0) then
   92.         call catch_error('ERROR: (GYRO) RADIAL_UPWIND must be > 0.')
   93.      endif
   94.      !
   95.      if (nonlinear_transfer_flag == 1 .and. integrator_method > 1) then
   96.         call catch_error('ERROR: (GYRO) Need INTEGRATOR_METHOD=1 for nonlinear transfer diag.')
   97.      endif
   98.      !---------------------------------------------------
   99.    
  100.      !---------------------------------------------------
  101.      ! Total number of pitch-angles
  102.      !
  103.      n_lambda = n_pass+n_trap
  104.      !---------------------------------------------------
  105.    
  106.      !---------------------------------------------------
  107.      ! n_moment: number of traditional moments (n,E)
  108.      ! p_moment: number of new moments (n,E,parallel,k,heating)
  109.    
  110.      n_moment = 2
  111.      p_moment = 4
  112.      !---------------------------------------------------
  113.    
  114.      !---------------------------------------------------
  115.      ! Figure out species numbers:
  116.      !
  117.      n_spec = 1
  118.      do while (n_vec(n_spec) > 0.0) 
  119.         n_spec = n_spec+1
  120.      enddo
  121.      n_ion = n_spec-1
  122.      if (electron_method == 4) n_ion = n_ion+1
  123.      !---------------------------------------------------
  124.    
  125.      !---------------------------------------------------
  126.      ! Sort out species indices.  There may seem to be an
  127.      ! awful lot of dimensions here, but all are needed 
  128.      ! to support the 4 different ways of treating the 
  129.      ! species (electron_method):
  130.      !
  131.      ! n_spec    : total number of ions and electrons
  132.      ! n_ion     : total number of ions and gk electrons
  133.      ! n_gk      : number of gyrokinetic species
  134.      ! n_kinetic : number of kinetic species
  135.      ! indx_e    : the electron index
  136.      !
  137.      select case (electron_method) 
  138.    
  139.      case (1)
  140.    
  141.         ! Adiabatic electrons
  142.    
  143.         n_kinetic = n_ion
  144.         indx_e    = n_spec
  145.         n_gk      = n_ion
  146.    
  147.      case (2)
  148.    
  149.         ! Drift-kinetic electrons
  150.    
  151.         n_kinetic = n_spec
  152.         indx_e    = n_spec
  153.         n_gk      = n_ion
  154.    
  155.      case (3)
  156.    
  157.         ! Adiabatic ions
  158.    
  159.         n_kinetic = 1
  160.         indx_e    = 1
  161.         n_gk      = 1
  162.    
  163.      case (4)
  164.    
  165.         ! Gyrokinetic electrons
  166.    
  167.         n_kinetic = n_ion
  168.         indx_e    = n_ion
  169.         n_gk      = n_ion
  170.    
  171.      end select
  172.      !---------------------------------------------------
  173.    
  174.      !---------------------------------------------------
  175.      ! Manage orbit upwind in special cases
  176.      !
  177.      select case (electron_method)
  178.      case (2)
  179.         ! No orbit upwind for implicit electrons
  180.         orbit_upwind_vec(0) = 0.0  
  181.      case (3)
  182.         ! Permute i-e for adiabatic ions
  183.         orbit_upwind_vec(0:1) = orbit_upwind_vec(1:0:-1) 
ftn-6205 ftn: VECTOR GYRO_SELECT_METHODS, File = gyro_select_methods.f90, Line = 183 
  A loop starting at line 183 was vectorized with a single vector iteration.

  184.      case (4)
  185.         ! Map electrons to final ion
  186.         orbit_upwind_vec(n_ion) = orbit_upwind_vec(0)
  187.      end select
  188.    
  189.      if (linsolve_method == 2) then
  190.         !     orbit_upwind_vec(n_ion) = 0.0
  191.         orbit_upwind_vec(:) = 0.0
ftn-6204 ftn: VECTOR GYRO_SELECT_METHODS, File = gyro_select_methods.f90, Line = 191 
  A loop starting at line 191 was vectorized.

  192.         !     orbit_upwind_vec(n_ion) = 1.0
  193.         !     radial_upwind = 0.0
  194.      endif
  195.      !---------------------------------------------------
  196.    
  197.      !---------------------------------------------------
  198.      ! Check on number of fields:
  199.      !
  200.      if (electron_method == 1) n_field = 1
  201.      if (ampere_scale == 0.0) n_field = 1
  202.      if (radial_profile_method /= 3 .and. betae_unit == 0.0) n_field = 1
  203.      !
  204.      if (n_field == 3) then
  205.         call send_message(&
  206.              'INFO: Rotation effects with delta B_parallel are experimental.')
  207.      endif
  208.      !---------------------------------------------------
  209.    
  210.      !---------------------------------------------------
  211.      ! Set eparallel_plot_flag
  212.      ! 
  213.      eparallel_plot_flag = 1
  214.      !---------------------------------------------------
  215.    
  216.      !---------------------------------------------------
  217.      ! Determine if collisions will be included
  218.      !
  219.      if (electron_method == 1) then
  220.         ! No electron equation, no electron collisions
  221.         nu_ei_scale = 0.0
  222.      endif
  223.      if (electron_method == 3) then
  224.         ! No ion equation, no ion collisions
  225.         nu_ii_scale = 0.0
  226.      endif
  227.      !
  228.      if (radial_profile_method == 3) then
  229.         if (nu_ei_scale > 0.0 .or. nu_ii_scale > 0.0) then
  230.            collision_flag = 1
  231.         else
  232.            collision_flag = 0
  233.         endif
  234.      else
  235.         if (nu_ei*nu_ei_scale > 0.0 .or. nu_ei*nu_ii_scale > 0.0) then
  236.            collision_flag = 1
  237.         else
  238.            collision_flag = 0
  239.         endif
  240.      endif
  241.      !
  242.      ! Catch some collision-related errors
  243.      !
  244.      if (collision_flag == 1) then
  245.    
  246.         if (n_pass < 4) then
  247.            call catch_error(&
  248.                 'ERROR: (GYRO) N_PASS >= 4 required for collisions.')
  249.         endif
  250.    
  251.      endif
  252.      !---------------------------------------------------
  253.    
  254.      call send_line(separator)
  255.    
  256.      !----------------------------------------------------
  257.      ! BASIC OPERATIONAL MODE
  258.      !
  259.      select case (linsolve_method)
  260.    
  261.      case (1)
  262.    
  263.         call send_line('operational mode     : INITIAL VALUE')
  264.         fakefield_flag = 1
  265.    
  266.      case (2)
  267.    
  268.         call send_line('operational mode     : FULL GK EIGENVALUE')
  269.         fakefield_flag = 1
  270.    
  271.      case (3)
  272.    
  273.         call send_line('operational mode     : FIELD EIGENVALUE')
  274.         fakefield_flag = 0
  275.    
  276.      end select
  277.      !----------------------------------------------------
  278.    
  279.      !----------------------------------------------------
  280.      ! BOUNDARY CONDITIONS:
  281.      !
  282.      select case (boundary_method)
  283.    
  284.      case (1)
  285.    
  286.         call send_line('boundary conditions  : PERIODIC')
  287.    
  288.         ! Set damping region size to zero
  289.         n_explicit_damp = 0
  290.    
  291.         ! We must have flat profile in this case:
  292.         flat_profile_flag = 1
  293.    
  294.         ! Don't want a source
  295.         source_flag = 0
  296.    
  297.         if (m_gyro == n_x/2) then
  298.            ! Fully pseudospectral gyroaverages
  299.            i_gyro = 1
  300.         else
  301.            ! Truncated gyroaverages
  302.            i_gyro = 0
  303.         endif
  304.    
  305.         if (m_dx == n_x/2) then
  306.            ! Full complex form
  307.            i_dx = 1
  308.         else
  309.            i_dx = 0
  310.         endif
  311.    
  312.         if (nonuniform_grid_flag == 1) then
  313.            call catch_error('ERROR: (GYRO) cannot have nonuniform grid.')
  314.         endif
  315.    
  316.      case (2)
  317.    
  318.         call send_line('boundary conditions  : NONPERIODIC')
  319.    
  320.         ! No harmonic operators for nonperiodic case
  321.    
  322.         if (m_gyro == n_x/2 .or. m_dx == n_x/2) then
  323.            call catch_error('ERROR: (GYRO) cannot have nonperiodic pseudospectral.')
  324.         endif
  325.         i_gyro = 0
  326.         i_dx   = 0
  327.    
  328.      case default
  329.    
  330.         call catch_error('ERROR: (GYRO) invalid boundary_method')
  331.    
  332.      end select
  333.      !----------------------------------------------------
  334.    
  335.      !----------------------------------------------------
  336.      ! PROFILE TYPE:
  337.      !
  338.      select case (radial_profile_method) 
  339.    
  340.      case (1)
  341.    
  342.         call send_line('profiles             : FLAT')
  343.    
  344.         geometry_method = -1
  345.         flat_profile_flag = 1
  346.    
  347.      case (3)
  348.    
  349.         geometry_method = num_equil_flag
  350.    
  351.         if (flat_profile_flag == 0) then
  352.            call send_line(&
  353.                 'profiles             : EXPERIMENTAL')
  354.         else
  355.            call send_line(&
  356.                 'profiles             : EXPERIMENTAL (flattened)')
  357.         endif
  358.    
  359.      case (5)
  360.    
  361.         geometry_method = num_equil_flag
  362.    
  363.         call send_line('profiles             : FLAT')
  364.    
  365.         flat_profile_flag = 1
  366.    
  367.      case default
  368.    
  369.         call catch_error('ERROR: (GYRO) profile_method')
  370.    
  371.      end select
  372.      !----------------------------------------------------
  373.    
  374.      !----------------------------------------------------
  375.      ! GEOMETRY:
  376.      !
  377.      select case (geometry_method)
  378.    
  379.      case (-1) 
  380.         call send_line('geometry             : S-ALPHA')
  381.    
  382.      case (0)
  383.         call send_line('geometry             : MODEL SHAPE')
  384.    
  385.      case (1)
  386.         call send_line('geometry             : GENERAL SHAPE (from EFIT)')
  387.    
  388.      case default
  389.         call catch_error('ERROR: (GYRO) num_equil_flag')
  390.    
  391.      end select
  392.      !----------------------------------------------------
  393.    
  394.      !----------------------------------------------------
  395.      ! ELECTRON TREATMENT:
  396.      !
  397.      select case (electron_method) 
  398.    
  399.      case (1)
  400.    
  401.         call send_line('electron_method      : ADIABATIC ELECTRONS')
  402.    
  403.      case (2)
  404.    
  405.         call send_line('electron_method      : IMPLICIT DRIFT-KINETIC ELECTRONS')
  406.    
  407.      case (3)
  408.    
  409.         call send_line('electron_method      : ADIABATIC IONS')
  410.    
  411.      case (4)
  412.    
  413.         call send_line('electron_method      : ALL SPECIES GYROKINETIC')
  414.    
  415.      case default
  416.    
  417.         call catch_error('ERROR: (GYRO) electron_method')
  418.    
  419.      end select
  420.      !----------------------------------------------------
  421.    
  422.      !----------------------------------------------------
  423.      ! ELECTROSTATIC or ELECTROMAGNETIC:
  424.      !
  425.      select case (n_field) 
  426.    
  427.      case (1)
  428.    
  429.         call send_line('fluctuations         : ELECTROSTATIC')
  430.    
  431.      case (2)
  432.    
  433.         call send_line('fluctuations         : EM: (Phi,A_par)')
  434.    
  435.      case (3)
  436.    
  437.         call send_line('fluctuations         : EM: (Phi,A_par,B_par)')
  438.    
  439.      case default
  440.    
  441.         call catch_error('ERROR: (GYRO) n_field')
  442.    
  443.      end select
  444.      !----------------------------------------------------
  445.    
  446.      !----------------------------------------------------
  447.      ! GYRO-AVERAGE METHOD:
  448.      !
  449.      select case (gyro_method) 
  450.    
  451.      case (1)
  452.    
  453.         call send_line('gyro_method          : ORIGINAL (INTEGRATED) POLARIZATION')
  454.    
  455.      case (2)
  456.    
  457.         call send_line('gyro_method          : GRID-BASED J0^2 POLARIZATION')
  458.    
  459.      case default
  460.    
  461.         call catch_error('ERROR: (GYRO) boundary_method')
  462.    
  463.      end select
  464.    
  465.      if (gyro_method == 1) then
  466.         mg_dx = m_dx
  467.         ig_dx = i_dx
  468.      else 
  469.         mg_dx = m_gyro
  470.         ig_dx = i_gyro
  471.      endif
  472.      !----------------------------------------------------
  473.    
  474.      !----------------------------------------------------
  475.      ! FLUCTUATION OUTPUT
  476.      !
  477.      mstr = ''
  478.      if (plot_u_flag == 1) mstr=trim(mstr)//'PHI(+)'
  479.      if (plot_u_flag == 0) mstr=trim(mstr)//'PHI( )'
  480.      if (plot_n_flag == 1) mstr=trim(mstr)//' N(+)'
  481.      if (plot_n_flag == 0) mstr=trim(mstr)//' N( )'
  482.      if (plot_e_flag == 1) mstr=trim(mstr)//' E(+)'
  483.      if (plot_e_flag == 0) mstr=trim(mstr)//' E( )'
  484.      if (plot_v_flag == 1) mstr=trim(mstr)//' V(+)'
  485.      if (plot_v_flag == 0) mstr=trim(mstr)//' V( )'
  486.    
  487.      call send_line('fluctuation output   : '//mstr)
  488.      !----------------------------------------------------
  489.    
  490.      !----------------------------------------------------
  491.      ! GRID SPACE METHOD:
  492.      !
  493.      select case (nonuniform_grid_flag) 
  494.    
  495.      case (0)
  496.    
  497.         call send_line('radial grid          : UNIFORM')
  498.    
  499.      case (1)
  500.    
  501.         if (flat_profile_flag == 1) then
  502.            nonuniform_grid_flag = 0 
  503.            call send_line('radial grid          : UNIFORM [reset]')
  504.         else
  505.            call send_line('radial grid          : NONUNIFORM (not recommended)')
  506.         endif
  507.    
  508.      case default
  509.    
  510.         call catch_error('ERROR: (GYRO) nonuniform_grid_flag')
  511.    
  512.      end select
  513.      !----------------------------------------------------
  514.    
  515.      !----------------------------------------------------
  516.      ! INTEGRATOR (for initial-value method only)
  517.      !
  518.      if (linsolve_method == 1) then
  519.    
  520.         if (electron_method == 2) then
  521.    
  522.            select case (integrator_method) 
  523.    
  524.            case (1)
  525.    
  526.               call send_line('integrator_method    : IMEX2')
  527.    
  528.            case (2)
  529.    
  530.               call send_line('integrator_method    : IMEX2+RK4')
  531.    
  532.            case (3)
  533.    
  534.               call send_line('integrator_method    : IMEX2+2(RK4)')
  535.    
  536.            case (4)
  537.    
  538.               call send_line('integrator_method    : IMEX2+3(RK4)')
  539.    
  540.            case default
  541.    
  542.               call catch_error('ERROR: (GYRO) integrator_method')
  543.    
  544.            end select
  545.    
  546.         else
  547.    
  548.            select case (integrator_method) 
  549.    
  550.            case (1)
  551.    
  552.               call send_line('integrator_method    : RK2')
  553.    
  554.            case (2)
  555.    
  556.               call send_line('integrator_method    : RK4')
  557.    
  558.            case default
  559.    
  560.               call catch_error('ERROR: (GYRO) integrator_method')
  561.    
  562.            end select
  563.    
  564.         endif
  565.    
  566.      endif
  567.      !----------------------------------------------------
  568.    
  569.      !-------------------------------------------------------
  570.      ! SPARSE MATRIX PACKAGE:
  571.      !
  572.      select case (sparse_method)
  573.    
  574.      case (1)
  575.    
  576.         call send_line('field solve          : UMFPACK (SEQUENTIAL)')
  577.    
  578.      case (2)
  579.    
  580.         call send_line('field solve          : MUMPS (DISTRIBUTED)')
  581.    
  582.      case default
  583.    
  584.         call catch_error('ERROR: (GYRO) sparse_method')
  585.    
  586.      end select
  587.      !-------------------------------------------------------
  588.    
  589.      !----------------------------------------------------
  590.      ! SOURCE METHOD:
  591.      !
  592.      select case (source_flag) 
  593.    
  594.      case (0)
  595.    
  596.         call send_line('source_flag          : SOURCE OFF')
  597.    
  598.      case (1)
  599.    
  600.         call send_line('source_flag          : SOURCE ON')
  601.    
  602.         ! There are 4 more partial lumps than full lumps.
  603.         n_lump = 4+n_source
  604.    
  605.         if (n_lump < 5) then
  606.            call catch_error('ERROR: (GYRO) N_SOURCE TOO SMALL')
  607.         endif
  608.    
  609.      case default
  610.    
  611.         call catch_error('ERROR: (GYRO) source_flag')
  612.    
  613.      end select
  614.      !----------------------------------------------------
  615.    
  616.      !-------------------------------------------------------
  617.      ! COLLISION FLAG:
  618.      !
  619.      if (collision_flag == 0) then
  620.    
  621.         call send_line('pitch-angle coll.    : OFF')
  622.    
  623.      else
  624.    
  625.         select case (ord_rbf)
  626.    
  627.         case (3)
  628.    
  629.            call send_line('pitch-angle coll.    : RBF r^3')
  630.    
  631.         case (5)
  632.    
  633.            call send_line('pitch-angle coll.    : RBF r^5')
  634.    
  635.         case (7)
  636.    
  637.            call send_line('pitch-angle coll.    : RBF r^7')
  638.    
  639.         case (9)
  640.    
  641.            call send_line('pitch-angle coll.    : RBF r^9')
  642.    
  643.         case (11)
  644.    
  645.            call send_line('pitch-angle coll.    : RBF r^11')
  646.    
  647.         case default
  648.    
  649.            call catch_error('ERROR: (GYRO) ord_rbf')
  650.    
  651.         end select
  652.    
  653.      endif
  654.    
  655.      !-------------------------------------------------------
  656.    
  657.      !-------------------------------------------------------
  658.      ! Z_EFF METHOD:
  659.      !
  660.      if (z_eff_method == 1) then
  661.         if (radial_profile_method == 3) then
  662.            call send_line('z_eff_method         : Use Z_EFF from input.profiles')
  663.         else
  664.            call send_line('z_eff_method         : Use Z_EFF from input.gyro')
  665.         endif
  666.      else
  667.         call send_line('z_eff_method         : Computing Z_EFF from n and Z.')
  668.      endif
  669.      !-------------------------------------------------------
  670.    
  671.      !-------------------------------------------------------
  672.      ! KROOK COLLISIONS FLAG:
  673.      !
  674.      if (nu_i_krook > 0.0) then
  675.         krook_flag = 1
  676.         call send_line('ion Krook coll.      : ON for all n')
  677.      else
  678.         krook_flag = 0
  679.      endif
  680.      !-------------------------------------------------------
  681.    
  682.      !-------------------------------------------------------
  683.      ! NONLINEAR FLAG:
  684.      !
  685.      select case (nonlinear_flag)
  686.    
  687.      case (0)
  688.    
  689.         call send_line('nonlinear dynamics   : OFF')
  690.    
  691.         !-------------------------------------------------------
  692.         ! LINDIFF_METHOD:
  693.         !
  694.         select case (lindiff_method)
  695.    
  696.         case (1)
  697.    
  698.            call send_line('linear diffusivity   : OFF')
  699.    
  700.         case (2)
  701.    
  702.            call send_line('linear diffusivity   : D/CHI ')
  703.    
  704.         case (3)
  705.    
  706.            call send_line('linear diffusivity   : RESPONSE FUNCTION')
  707.    
  708.         case default
  709.    
  710.            call catch_error('ERROR: (GYRO) lindiff_method')
  711.    
  712.         end select
  713.         !-------------------------------------------------------
  714.    
  715.      case (1)
  716.    
  717.         call send_line('nonlinear dynamics   : ON')
  718.    
  719.         !-------------------------------------------------------
  720.         ! NONLINEAR METHOD:
  721.         !
  722.         select case (nl_method)
  723.    
  724.         case (1)
  725.    
  726.            call send_line('nonlinear bracket    : DIRECT')
  727.    
  728.         case (2)
  729.    
  730.            call send_line('nonlinear bracket    : REAL FFT')
  731.    
  732.         case default
  733.    
  734.            call catch_error('ERROR: (GYRO) nl_method')
  735.    
  736.         end select
  737.         !-------------------------------------------------------
  738.    
  739.      case default
  740.    
  741.         call catch_error('ERROR: (GYRO) nonlinear_flag')
  742.    
  743.      end select
  744.      !-------------------------------------------------------
  745.    
  746.      call send_line(separator)
  747.    
  748.      !-------------------------------------------------------
  749.      ! Print some MPI/OpenMP diagnostics
  750.      !
  751.      if (n_omp > 1) then 
  752.         call send_message('INFO: (GYRO) Initialized multi-threaded MPI')
  753.      else
  754.         call send_message('INFO: (GYRO) Dropped down to single-threaded MPI')
  755.      endif
  756.      !-------------------------------------------------------
  757.    
  758.      if (debug_flag == 1 .and. i_proc == 0) then
  759.         print *,'[select_methods done]'
  760.      endif
  761.    
  762.    end subroutine gyro_select_methods


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_SELECT_METHODS (Line 28, file gyro_select_methods.f90)

Name  Messages
----  --------
CATCH_ERROR
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_SELECT_METHODS (Line 26, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 29, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 35, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 41, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 48, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 51, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 58, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 64, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 70, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 76, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 82, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 88, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 92, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 96, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 247, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 313, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 323, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 330, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 369, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 389, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 417, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 441, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 461, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 510, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 542, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 560, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 584, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 606, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 611, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 649, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 710, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 734, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 741, file gyro_select_methods.f90)

Name  Messages
----  --------
CHAR(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_GLOBALS
      Defined as:  No definitions.

      Used By:     GYRO_SELECT_METHODS

Name  Messages
----  --------
GYRO_SELECT_METHODS
      Defined as:  Subroutine (line 10, file gyro_select_methods.f90)

      Interface:   None

      Calls:       CATCH_ERROR (Line 26, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 29, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 35, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 41, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 48, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 51, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 58, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 64, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 70, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 76, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 82, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 88, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 92, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 96, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 247, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 313, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 323, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 330, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 369, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 389, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 417, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 441, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 461, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 510, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 542, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 560, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 584, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 606, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 611, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 649, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 710, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 734, file gyro_select_methods.f90)
                   CATCH_ERROR (Line 741, file gyro_select_methods.f90)
                   ABS(Intrinsic) (Line 28, file gyro_select_methods.f90)
                   SEND_MESSAGE (Line 205, file gyro_select_methods.f90)
                   SEND_MESSAGE (Line 752, file gyro_select_methods.f90)
                   SEND_MESSAGE (Line 754, file gyro_select_methods.f90)
                   SEND_LINE (Line 254, file gyro_select_methods.f90)
                   SEND_LINE (Line 263, file gyro_select_methods.f90)
                   SEND_LINE (Line 268, file gyro_select_methods.f90)
                   SEND_LINE (Line 273, file gyro_select_methods.f90)
                   SEND_LINE (Line 286, file gyro_select_methods.f90)
                   SEND_LINE (Line 318, file gyro_select_methods.f90)
                   SEND_LINE (Line 342, file gyro_select_methods.f90)
                   SEND_LINE (Line 352, file gyro_select_methods.f90)
                   SEND_LINE (Line 355, file gyro_select_methods.f90)
                   SEND_LINE (Line 363, file gyro_select_methods.f90)
                   SEND_LINE (Line 380, file gyro_select_methods.f90)
                   SEND_LINE (Line 383, file gyro_select_methods.f90)
                   SEND_LINE (Line 386, file gyro_select_methods.f90)
                   SEND_LINE (Line 401, file gyro_select_methods.f90)
                   SEND_LINE (Line 405, file gyro_select_methods.f90)
                   SEND_LINE (Line 409, file gyro_select_methods.f90)
                   SEND_LINE (Line 413, file gyro_select_methods.f90)
                   SEND_LINE (Line 429, file gyro_select_methods.f90)
                   SEND_LINE (Line 433, file gyro_select_methods.f90)
                   SEND_LINE (Line 437, file gyro_select_methods.f90)
                   SEND_LINE (Line 453, file gyro_select_methods.f90)
                   SEND_LINE (Line 457, file gyro_select_methods.f90)
                   SEND_LINE (Line 487, file gyro_select_methods.f90)
                   SEND_LINE (Line 497, file gyro_select_methods.f90)
                   SEND_LINE (Line 503, file gyro_select_methods.f90)
                   SEND_LINE (Line 505, file gyro_select_methods.f90)
                   SEND_LINE (Line 526, file gyro_select_methods.f90)
                   SEND_LINE (Line 530, file gyro_select_methods.f90)
                   SEND_LINE (Line 534, file gyro_select_methods.f90)
                   SEND_LINE (Line 538, file gyro_select_methods.f90)
                   SEND_LINE (Line 552, file gyro_select_methods.f90)
                   SEND_LINE (Line 556, file gyro_select_methods.f90)
                   SEND_LINE (Line 576, file gyro_select_methods.f90)
                   SEND_LINE (Line 580, file gyro_select_methods.f90)
                   SEND_LINE (Line 596, file gyro_select_methods.f90)
                   SEND_LINE (Line 600, file gyro_select_methods.f90)
                   SEND_LINE (Line 621, file gyro_select_methods.f90)
                   SEND_LINE (Line 629, file gyro_select_methods.f90)
                   SEND_LINE (Line 633, file gyro_select_methods.f90)
                   SEND_LINE (Line 637, file gyro_select_methods.f90)
                   SEND_LINE (Line 641, file gyro_select_methods.f90)
                   SEND_LINE (Line 645, file gyro_select_methods.f90)
                   SEND_LINE (Line 662, file gyro_select_methods.f90)
                   SEND_LINE (Line 664, file gyro_select_methods.f90)
                   SEND_LINE (Line 667, file gyro_select_methods.f90)
                   SEND_LINE (Line 676, file gyro_select_methods.f90)
                   SEND_LINE (Line 689, file gyro_select_methods.f90)
                   SEND_LINE (Line 698, file gyro_select_methods.f90)
                   SEND_LINE (Line 702, file gyro_select_methods.f90)
                   SEND_LINE (Line 706, file gyro_select_methods.f90)
                   SEND_LINE (Line 717, file gyro_select_methods.f90)
                   SEND_LINE (Line 726, file gyro_select_methods.f90)
                   SEND_LINE (Line 730, file gyro_select_methods.f90)
                   SEND_LINE (Line 746, file gyro_select_methods.f90)
                   TRIM(Intrinsic) (Line 478, file gyro_select_methods.f90)
                   TRIM(Intrinsic) (Line 479, file gyro_select_methods.f90)
                   TRIM(Intrinsic) (Line 480, file gyro_select_methods.f90)
                   TRIM(Intrinsic) (Line 481, file gyro_select_methods.f90)
                   TRIM(Intrinsic) (Line 482, file gyro_select_methods.f90)
                   TRIM(Intrinsic) (Line 483, file gyro_select_methods.f90)
                   TRIM(Intrinsic) (Line 484, file gyro_select_methods.f90)
                   TRIM(Intrinsic) (Line 485, file gyro_select_methods.f90)

        Uses:      GYRO_GLOBALS
                   OMPDATA

Name  Messages
----  --------
OMPDATA
      Defined as:  No definitions.

      Used By:     GYRO_SELECT_METHODS

Name  Messages
----  --------
SEND_LINE
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_SELECT_METHODS (Line 254, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 263, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 268, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 273, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 286, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 318, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 342, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 352, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 355, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 363, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 380, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 383, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 386, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 401, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 405, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 409, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 413, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 429, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 433, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 437, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 453, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 457, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 487, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 497, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 503, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 505, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 526, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 530, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 534, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 538, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 552, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 556, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 576, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 580, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 596, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 600, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 621, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 629, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 633, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 637, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 641, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 645, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 662, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 664, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 667, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 676, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 689, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 698, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 702, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 706, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 717, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 726, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 730, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 746, file gyro_select_methods.f90)

Name  Messages
----  --------
SEND_MESSAGE
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_SELECT_METHODS (Line 205, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 752, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 754, file gyro_select_methods.f90)

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_SELECT_METHODS (Line 478, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 479, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 480, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 481, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 482, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 483, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 484, file gyro_select_methods.f90)
                   GYRO_SELECT_METHODS (Line 485, file gyro_select_methods.f90)

Name  Messages
----  --------
_F90_TRIM(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
