%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /global/u2/b/bassem/gyro-EP/src/gyro_alloc_orbit.f90
Compiled : 01/19/21  15:35:27
Compiler : Version 9.1.0
Ftnlx    : Version 9.1.0 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hdynamic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -hnoomp -em
           -J/global/homes/b/bassem/gyro-EP/modules -sreal64 -eD -Ktrap=fp -m1
           -Rbcdps -G0 -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -c gyro_alloc_orbit.f90
           -I/opt/cray/pe/cce/9.1.0/cce-clang/x86_64/lib/clang/9.0.0/include
           -I/opt/cray/pe/cce/9.1.0/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -I/opt/cray/pe/libsci/19.06.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.10/gni/mpich-cray/9.0/include
           -I/opt/cray/pe/hdf5/1.10.5.2/cray/9.0/include
           -I/opt/cray/pe/netcdf/4.6.3.2/cray/9.0/include
           -I/opt/cray/rca/2.2.20-7.0.1.1_4.53__g8e3fb5b.ari/include
           -I/opt/cray/alps/6.6.58-7.0.1.1_6.10__g437d88db.ari/include
           -I/opt/cray/xpmem/2.2.20-7.0.1.1_4.14__g0475745.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-7.0.1.1_6.32__g3b1768f.ari/include
           -I/opt/cray/dmapp/7.1.1-7.0.1.1_4.54__g38cf134.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/ugni/6.0.14.0-7.0.1.1_7.40__ge78e5b0.ari/include
           -I/opt/cray/udreg/2.3.2-7.0.1.1_3.38__g8175d3d.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.1.1_4.16__g7109084.ari/include
           -I/opt/cray/krca/2.2.6-7.0.1.1_5.39__gb641b12.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
Program
  Units  : GYRO_ALLOC_ORBIT

ftnlx report
------------
Source   : /global/u2/b/bassem/gyro-EP/src/gyro_alloc_orbit.f90
Date     : 01/19/2021  15:35:28


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !----------------------------------------------------------
    2.    ! gyro_alloc_orbit
    3.    !
    4.    ! PURPOSE:
    5.    !  Create and destroy orbit arrays.
    6.    !
    7.    ! NOTES:
    8.    !  flag=0: deallocate
    9.    !  flag=1: allocate
   10.    !
   11.    !  Need to know n_lambda,n_stack before this is called.
   12.    !
   13.    !  See: gyro_banana_operators, gyro_geometry_arrays.
   14.    !----------------------------------------------------------
   15.    
   16.    subroutine gyro_alloc_orbit(flag)
   17.    
   18.      use gyro_globals
   19.      use gyro_collision_private
   20.    
   21.      integer, intent(in) :: flag
   22.    
   23.      if (flag == 1 .and. allocated(theta_t)) then
   24.         if (i_proc == 0) then
   25.            print *,'WARNING: already allocated arrays in gyro_alloc_orbit'
   26.         endif
   27.         return
   28.      endif
   29.      if (flag == 0 .and. .not.allocated(theta_t)) then
   30.         if (i_proc == 0) then
   31.            print *,'WARNING: cannot deallocate arrays in gyro_alloc_orbit'
   32.         endif
   33.         return
   34.      endif
   35.    
   36.      if (flag == 1) then
   37.    
   38.         ! Theta/tau grid functions
   39.    
   40.         allocate(theta_t(n_x,n_lambda,n_stack))
   41.         allocate(tau(n_x,n_lambda,n_stack))
   42.         allocate(m_cyc(n_class,-n_stack+1:2*n_stack,2))
   43.         allocate(p_cyc(n_class,n_x,-n_stack+1:2*n_stack,2))
   44.         allocate(m_phys(n_class,n_stack))
   45.         allocate(p_phys(n_class,n_stack))
   46.         allocate(omega(n_x,n_lambda))
   47.         allocate(m_map(n_class,n_theta(2),2))
   48.         allocate(theta_int(n_theta_int))
   49.         allocate(theta_plot(n_theta_plot))
   50.    
   51.         ! Geometry functions
   52.         allocate(b0_t(n_x,n_lambda,n_stack))
   53.         allocate(g_theta_t(n_x,n_lambda,n_stack))
   54.         allocate(grad_r_t(n_x,n_lambda,n_stack))
   55.         allocate(qrat_t(n_x,n_lambda,n_stack))
   56.         allocate(cos_t(n_x,n_lambda,n_stack))
   57.         allocate(cos_p_t(n_x,n_lambda,n_stack))   
   58.         allocate(captheta_t(n_x,n_lambda,n_stack))   
   59.         allocate(sin_t(n_x,n_lambda,n_stack))   
   60.         allocate(bt_t(n_x,n_lambda,n_stack))
   61.         allocate(bp_t(n_x,n_lambda,n_stack))
   62.         allocate(bigr_t(n_x,n_lambda,n_stack))
   63.         allocate(b0_plot(n_x,n_theta_plot))
   64.         allocate(g_theta_plot(n_x,n_theta_plot))   
   65.         allocate(usin_t(n_x,n_lambda,n_stack))   
   66.         allocate(ucos_t(n_x,n_lambda,n_stack))   
   67.    
   68.         ! Blending arrays
   69.         allocate(c_fluxave(n_blend,n_x))
   70.         allocate(ff_mm(n_blend,n_blend,n_x,2))
   71.         allocate(ff_mm_piv(n_blend,n_x,2))
   72.         allocate(ff2_mm(2*n_blend,2*n_blend,n_x))
   73.         allocate(ff2_mm_piv(2*n_blend,n_x))
   74.         allocate(blend_plot(n_blend,n_theta_plot,n_x))
   75.         allocate(blend_prime_plot(n_blend,n_theta_plot,n_x))
   76.    
   77.         if (collision_flag == 1) then
   78.            ! Collision arrays
   79.            allocate(nu_total(n_x,n_energy,indx_e))
   80.            allocate(xi(n_x,n_lambda,n_stack))
   81.         endif
   82.    
   83.         if (n_field > 1) then
   84.            allocate(coll_vel(n_x,n_blend,n_blend))
   85.         endif
   86.    
   87.         if(n_field == 3) then
   88.            allocate(coll_vel_perp1(n_x,n_blend,n_blend))
   89.            allocate(coll_vel_perp2(n_x,n_blend,n_blend))
   90.         endif
   91.    
   92.      else 
   93.    
   94.         deallocate(theta_t)
   95.         deallocate(tau)
   96.         deallocate(m_cyc)
   97.         deallocate(p_cyc)
   98.         deallocate(m_phys)
   99.         deallocate(p_phys)
  100.         deallocate(omega)
  101.         deallocate(m_map)
  102.         deallocate(theta_int)
  103.         deallocate(theta_plot)
  104.    
  105.         deallocate(b0_t)
  106.         deallocate(g_theta_t)
  107.         deallocate(grad_r_t)
  108.         deallocate(qrat_t)
  109.         deallocate(cos_t)
  110.         deallocate(cos_p_t)   
  111.         deallocate(captheta_t)   
  112.         deallocate(sin_t)   
  113.         deallocate(bt_t)
  114.         deallocate(bp_t)
  115.         deallocate(bigr_t)
  116.         deallocate(b0_plot)
  117.         deallocate(g_theta_plot)   
  118.         deallocate(usin_t)
  119.         deallocate(ucos_t)
  120.    
  121.         deallocate(c_fluxave)
  122.         deallocate(ff_mm)
  123.         deallocate(ff_mm_piv)
  124.         deallocate(ff2_mm)
  125.         deallocate(ff2_mm_piv)
  126.         deallocate(blend_plot)
  127.         deallocate(blend_prime_plot)
  128.    
  129.         if (allocated(nu_total)) deallocate(nu_total)
  130.         if (allocated(xi)) deallocate(xi)
  131.         if (allocated(nu_coll_d))     deallocate(nu_coll_d)
  132.         if (allocated(rs_coll_const))     deallocate(rs_coll_const)
  133.         if (allocated(rs_nunu_const))     deallocate(rs_nunu_const)
  134.         if (allocated(indx_coll))         deallocate(indx_coll)
  135.         if (allocated(coll_vel))       deallocate(coll_vel)
  136.         if (allocated(coll_vel_perp1)) deallocate(coll_vel_perp1)
  137.         if (allocated(coll_vel_perp2)) deallocate(coll_vel_perp2)
  138.    
  139.      endif
  140.    
  141.      if ((debug_flag == 1) .and. (i_proc == 0)) then
  142.        print *, '[gyro_alloc_orbit done]'
  143.      endif
  144.      if (debug_flag == 1) call send_line('[gyro_alloc_orbit done]')
  145.    
  146.    end subroutine gyro_alloc_orbit


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ALLOCATED(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_ALLOC_ORBIT (Line 23, file gyro_alloc_orbit.f90)
                   GYRO_ALLOC_ORBIT (Line 29, file gyro_alloc_orbit.f90)
                   GYRO_ALLOC_ORBIT (Line 129, file gyro_alloc_orbit.f90)
                   GYRO_ALLOC_ORBIT (Line 130, file gyro_alloc_orbit.f90)
                   GYRO_ALLOC_ORBIT (Line 131, file gyro_alloc_orbit.f90)
                   GYRO_ALLOC_ORBIT (Line 132, file gyro_alloc_orbit.f90)
                   GYRO_ALLOC_ORBIT (Line 133, file gyro_alloc_orbit.f90)
                   GYRO_ALLOC_ORBIT (Line 134, file gyro_alloc_orbit.f90)
                   GYRO_ALLOC_ORBIT (Line 135, file gyro_alloc_orbit.f90)
                   GYRO_ALLOC_ORBIT (Line 136, file gyro_alloc_orbit.f90)
                   GYRO_ALLOC_ORBIT (Line 137, file gyro_alloc_orbit.f90)

Name  Messages
----  --------
CHAR(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_ALLOC_ORBIT
      Defined as:  Subroutine (line 16, file gyro_alloc_orbit.f90)

      Interface:   None

      Calls:       ALLOCATED(Intrinsic) (Line 23, file gyro_alloc_orbit.f90)
                   ALLOCATED(Intrinsic) (Line 29, file gyro_alloc_orbit.f90)
                   ALLOCATED(Intrinsic) (Line 129, file gyro_alloc_orbit.f90)
                   ALLOCATED(Intrinsic) (Line 130, file gyro_alloc_orbit.f90)
                   ALLOCATED(Intrinsic) (Line 131, file gyro_alloc_orbit.f90)
                   ALLOCATED(Intrinsic) (Line 132, file gyro_alloc_orbit.f90)
                   ALLOCATED(Intrinsic) (Line 133, file gyro_alloc_orbit.f90)
                   ALLOCATED(Intrinsic) (Line 134, file gyro_alloc_orbit.f90)
                   ALLOCATED(Intrinsic) (Line 135, file gyro_alloc_orbit.f90)
                   ALLOCATED(Intrinsic) (Line 136, file gyro_alloc_orbit.f90)
                   ALLOCATED(Intrinsic) (Line 137, file gyro_alloc_orbit.f90)
                   SEND_LINE (Line 144, file gyro_alloc_orbit.f90)

        Uses:      GYRO_GLOBALS
                   GYRO_COLLISION_PRIVATE

Name  Messages
----  --------
GYRO_COLLISION_PRIVATE
      Defined as:  No definitions.

      Used By:     GYRO_ALLOC_ORBIT

Name  Messages
----  --------
GYRO_GLOBALS
      Defined as:  No definitions.

      Used By:     GYRO_ALLOC_ORBIT

Name  Messages
----  --------
SEND_LINE
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_ALLOC_ORBIT (Line 144, file gyro_alloc_orbit.f90)

Name  Messages
----  --------
_ALLOCATED(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
