%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /global/u2/b/bassem/gyro-EP/src/gyro_alloc_big.f90
Compiled : 01/19/21  15:35:27
Compiler : Version 9.1.0
Ftnlx    : Version 9.1.0 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hdynamic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -hnoomp -em
           -J/global/homes/b/bassem/gyro-EP/modules -sreal64 -eD -Ktrap=fp -m1
           -Rbcdps -G0 -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -c gyro_alloc_big.f90
           -I/opt/cray/pe/cce/9.1.0/cce-clang/x86_64/lib/clang/9.0.0/include
           -I/opt/cray/pe/cce/9.1.0/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -I/opt/cray/pe/libsci/19.06.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.10/gni/mpich-cray/9.0/include
           -I/opt/cray/pe/hdf5/1.10.5.2/cray/9.0/include
           -I/opt/cray/pe/netcdf/4.6.3.2/cray/9.0/include
           -I/opt/cray/rca/2.2.20-7.0.1.1_4.53__g8e3fb5b.ari/include
           -I/opt/cray/alps/6.6.58-7.0.1.1_6.10__g437d88db.ari/include
           -I/opt/cray/xpmem/2.2.20-7.0.1.1_4.14__g0475745.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-7.0.1.1_6.32__g3b1768f.ari/include
           -I/opt/cray/dmapp/7.1.1-7.0.1.1_4.54__g38cf134.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/ugni/6.0.14.0-7.0.1.1_7.40__ge78e5b0.ari/include
           -I/opt/cray/udreg/2.3.2-7.0.1.1_3.38__g8175d3d.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.1.1_4.16__g7109084.ari/include
           -I/opt/cray/krca/2.2.6-7.0.1.1_5.39__gb641b12.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
Program
  Units  : GYRO_ALLOC_BIG

ftnlx report
------------
Source   : /global/u2/b/bassem/gyro-EP/src/gyro_alloc_big.f90
Date     : 01/19/2021  15:35:27


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !----------------------------------------------------
    2.    ! gyro_alloc_big.f90
    3.    !
    4.    ! PURPOSE:
    5.    !  Allocation for most of the large arrays (typically 
    6.    !  physical fields) needed for time stepping.  Other 
    7.    !  arrays are allocated as they are needed.
    8.    !
    9.    ! NOTES:
   10.    !
   11.    ! The tentative "priority" for ordering indices in
   12.    ! array is:
   13.    !
   14.    !  j         m         i     p_nek_loc   is
   15.    !  n_blend   n_stack   n_x   n_nek_loc   n_spec
   16.    !------------------------------------------------------
   17.    
   18.    subroutine gyro_alloc_big(flag)
   19.    
   20.      use gyro_globals
   21.      use gyro_pointers
   22.    
   23.      implicit none
   24.    
   25.      integer, intent(in) :: flag
   26.    
   27.      if (flag == 1 .and. allocated(field_blend)) then
   28.         if (i_proc == 0) then
   29.            print *,'WARNING: (GYRO) already allocated arrays in gyro_alloc_big'
   30.         endif
   31.         return
   32.      endif
   33.      if (flag == 0 .and. .not.allocated(field_blend)) then
   34.         if (i_proc == 0) then
   35.            print *,'WARNING: (GYRO) cannot deallocate arrays in gyro_alloc_big'
   36.         endif
   37.         return
   38.      endif
   39.    
   40.      if (flag == 1) then
   41.    
   42.         allocate(field_blend(n_blend,n_x,n_field))
   43.         allocate(field_blend_old(n_blend,n_x,n_field))
   44.         allocate(field_blend_old2(n_blend,n_x,n_field))
   45.         allocate(field_blend_dot(n_blend,n_x,n_field))
   46.         allocate(field_tau(n_stack,n_x,n_nek_loc_1,n_field))
   47.         allocate(field_tau_old(n_stack,n_x,n_nek_loc_1,n_field))
   48.         allocate(field_tau_old2(n_stack,n_x,n_nek_loc_1,n_field))
   49.         allocate(phi_squared(n_x))
   50.         allocate(field_fluxave(n_x,3))
   51.         allocate(ave_phi(2,n_field))
   52.         allocate(h_err(n_stack,n_x,n_nek_loc_1,n_kinetic))
   53.    
   54.         if (.not.allocated(h)) allocate(h(n_stack,n_x,n_nek_loc_1,n_kinetic))
   55.         allocate(h_old(n_stack,n_x,n_nek_loc_1,n_kinetic))
   56.         allocate(h_0(n_stack,n_x,n_nek_loc_1,n_kinetic))
   57.         allocate(h_cap(n_stack,n_x,n_nek_loc_1,n_kinetic))
   58.         allocate(h_cap_old(n_stack,n_x,n_nek_loc_1,n_kinetic))
   59.         allocate(h_cap_old2(n_stack,n_x,n_nek_loc_1,n_kinetic))
   60.         allocate(h_cap_dot(n_stack,n_x,n_nek_loc_1,n_kinetic))
   61.         allocate(rhs(n_stack,n_x,n_nek_loc_1,n_kinetic))
   62.         allocate(rhs_dr(n_stack,n_x,n_nek_loc_1,n_kinetic))
   63.         allocate(rhs_dt(n_stack,n_x,n_nek_loc_1,n_kinetic))
   64.         allocate(entropy(n_kinetic,n_entro))
   65.         allocate(f_store(n_stack,n_x,n_nek_loc_1,n_kinetic))
   66.         allocate(p_store(n_stack,n_x,n_nek_loc_1,n_kinetic))
   67.    
   68.         if (krook_flag == 1) then
   69.            allocate(rhs_krook(n_stack,n_x,n_nek_loc_1))
   70.         endif
   71.    
   72.         if (collision_flag == 1) then
   73.            allocate(f_coll(n_stack,n_x,n_nek_loc_1))
   74.            allocate(fb_coll(n_stack,n_x,n_nek_loc_1))
   75.            allocate(h_c(n_stack,n_lambda,n_ine_loc_1)) 
   76.         endif
   77.    
   78.         allocate(h_tran(nv1_SSUB,msplit_SSUB,n_n,n_kinetic))
   79.         allocate(gyro_h(n_stack,n_x,n_nek_loc_1,n_kinetic))
   80.    
   81.         if (n_field == 3) then
   82.            allocate(gyro_h_aperp(n_stack,n_x,n_nek_loc_1,n_kinetic))
   83.         endif
   84.    
   85.         allocate(gyro_uv(n_stack,n_x,n_nek_loc_1,n_kinetic,n_field))
   86.         allocate(kyro_uv(n_stack,n_x,n_nek_loc_1,n_kinetic,n_field))
   87.         allocate(gyro_uv_old2(n_stack,n_x,n_nek_loc_1,n_kinetic,n_field))
   88.         allocate(gyro_uv_old(n_stack,n_x,n_nek_loc_1,n_kinetic,n_field))
   89.         allocate(gyro_uv_dot(n_stack,n_x,n_nek_loc_1,n_kinetic,n_field))
   90.         allocate(gyro_u(n_stack,n_x,n_nek_loc_1,n_kinetic))
   91.         allocate(gyro_u_tran(nv1_SSUB,msplit_SSUB,n_n,n_kinetic))
   92.         allocate(phi(n_theta_int,n_x,n_field))
   93.         allocate(vel_sum_p(n_blend,n_x))
   94.         allocate(vel_sum_a(n_blend,n_x))
   95.         allocate(vel_sum_aperp(n_blend,n_x))
   96.         allocate(phi_plot(n_theta_plot,n_x,n_field+eparallel_plot_flag))
   97.    
   98.         allocate(moments_plot(n_theta_plot,n_x,n_kinetic,3))
   99.         allocate(moments_zero_plot(n_x,n_kinetic,n_moment))
  100.    
  101.         allocate(kxkyspec(n_x))
  102.         allocate(k_perp_squared(n_n))
  103.         if (velocity_output_flag == 1) then
  104.            allocate(nonlinear_flux_velocity(n_energy,n_lambda,n_kinetic,n_field,n_moment))
  105.         endif
  106.    
  107.         allocate(nonlinear_flux_passing(n_x,n_kinetic,n_field,p_moment))
  108.         allocate(nonlinear_flux_trapped(n_x,n_kinetic,n_field,p_moment))
  109.         allocate(nonlinear_flux_momparts(n_kinetic,3))
  110.         allocate(nonlinear_flux_excparts(n_kinetic,2))
  111.         allocate(gbflux_i(n_kinetic,n_field,p_moment,n_x))
  112.         allocate(gbflux_i_trapped(n_kinetic,n_field,p_moment,n_x))
  113.         allocate(gbflux(n_kinetic,n_field,p_moment))
  114.         allocate(gbflux_mom(n_kinetic,3))
  115.         allocate(gbflux_exc(n_kinetic,4))
  116.         allocate(gbflux_trapped(n_kinetic,n_field,p_moment))
  117.         allocate(gbflux_n(n_kinetic,n_field,p_moment))
  118.         allocate(gbflux_vec(n_kinetic,n_field,p_moment,n_x))
  119.    
  120.         allocate(nl_transfer(n_x,2))
  121.    
  122.         allocate(time_error(n_kinetic))
  123.         allocate(w_time(time_skip))
  124.         allocate(omega_linear(n_n,2))
  125.    
  126.         !------------------------------------------------------------
  127.         ! Source-related arrays
  128.         !
  129.         allocate(h0_eq(n_kinetic,n_energy,n_x))
  130.         allocate(h0_mod(n_kinetic,n_energy,n_x))
  131.         !
  132.         allocate(h0_n(n_kinetic,n_x))
  133.         allocate(h0_e(n_kinetic,n_x))
  134.         allocate(source_n(n_kinetic,n_x))
  135.         allocate(source_e(n_kinetic,n_x))
  136.         !------------------------------------------------------------
  137.    
  138.      else 
  139.    
  140.         deallocate(field_blend)
  141.         deallocate(field_blend_old)
  142.         deallocate(field_blend_old2)
  143.         deallocate(field_blend_dot)
  144.         deallocate(field_tau)
  145.         deallocate(field_tau_old)
  146.         deallocate(field_tau_old2)
  147.         deallocate(phi_squared)
  148.         deallocate(field_fluxave)
  149.         deallocate(ave_phi)
  150.         deallocate(h_err)
  151.    
  152.         deallocate(h)
  153.         deallocate(h_old)
  154.         deallocate(h_0)
  155.         deallocate(h_cap)
  156.         deallocate(h_cap_old)
  157.         deallocate(h_cap_old2)
  158.         deallocate(h_cap_dot)
  159.         deallocate(rhs)
  160.         deallocate(rhs_dr)
  161.         deallocate(rhs_dt)
  162.         deallocate(entropy)
  163.         deallocate(f_store)
  164.         deallocate(p_store)
  165.    
  166.         if (allocated(rhs_krook)) deallocate(rhs_krook)
  167.         if (allocated(f_coll)) deallocate(f_coll)
  168.         if (allocated(fb_coll)) deallocate(fb_coll)
  169.         if (allocated(h_c)) deallocate(h_c) 
  170.    
  171.         deallocate(h_tran)
  172.         deallocate(gyro_h)
  173.         if  (allocated(gyro_h_aperp)) deallocate(gyro_h_aperp)
  174.    
  175.         deallocate(gyro_uv)
  176.         if (allocated(kyro_uv)) deallocate(kyro_uv)
  177.         deallocate(gyro_uv_old2)
  178.         deallocate(gyro_uv_old)
  179.         deallocate(gyro_uv_dot)
  180.         deallocate(gyro_u)
  181.         deallocate(gyro_u_tran)
  182.         deallocate(phi)
  183.         deallocate(vel_sum_p)
  184.         deallocate(vel_sum_a)
  185.         deallocate(vel_sum_aperp)
  186.         deallocate(phi_plot)
  187.    
  188.         deallocate(moments_plot)
  189.         deallocate(moments_zero_plot)
  190.    
  191.         deallocate(kxkyspec)
  192.         deallocate(k_perp_squared)
  193.         if (allocated(nonlinear_flux_velocity)) deallocate(nonlinear_flux_velocity)
  194.    
  195.         deallocate(nonlinear_flux_passing)  
  196.         deallocate(nonlinear_flux_trapped)
  197.         deallocate(nonlinear_flux_momparts)
  198.         deallocate(nonlinear_flux_excparts)
  199.    
  200.         deallocate(gbflux_i)
  201.         deallocate(gbflux_i_trapped)
  202.         deallocate(gbflux)
  203.         deallocate(gbflux_mom)
  204.         deallocate(gbflux_exc)
  205.         deallocate(gbflux_trapped)
  206.         deallocate(gbflux_n)
  207.         deallocate(gbflux_vec)
  208.    
  209.         deallocate(nl_transfer)
  210.    
  211.         deallocate(time_error)
  212.         deallocate(w_time)
  213.         deallocate(omega_linear)
  214.         deallocate(h0_eq)
  215.         deallocate(h0_mod)
  216.         deallocate(h0_n)
  217.         deallocate(h0_e)
  218.         deallocate(source_n)
  219.         deallocate(source_e)
  220.    
  221.      endif
  222.    
  223.      if (i_proc == 0 .and. debug_flag == 1) then
  224.         print *,'[allocate_big done]' 
  225.      endif
  226.    
  227.    end subroutine gyro_alloc_big


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ALLOCATED(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_ALLOC_BIG (Line 27, file gyro_alloc_big.f90)
                   GYRO_ALLOC_BIG (Line 33, file gyro_alloc_big.f90)
                   GYRO_ALLOC_BIG (Line 54, file gyro_alloc_big.f90)
                   GYRO_ALLOC_BIG (Line 166, file gyro_alloc_big.f90)
                   GYRO_ALLOC_BIG (Line 167, file gyro_alloc_big.f90)
                   GYRO_ALLOC_BIG (Line 168, file gyro_alloc_big.f90)
                   GYRO_ALLOC_BIG (Line 169, file gyro_alloc_big.f90)
                   GYRO_ALLOC_BIG (Line 173, file gyro_alloc_big.f90)
                   GYRO_ALLOC_BIG (Line 176, file gyro_alloc_big.f90)
                   GYRO_ALLOC_BIG (Line 193, file gyro_alloc_big.f90)

Name  Messages
----  --------
CHAR(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_ALLOC_BIG
      Defined as:  Subroutine (line 18, file gyro_alloc_big.f90)

      Interface:   None

      Calls:       ALLOCATED(Intrinsic) (Line 27, file gyro_alloc_big.f90)
                   ALLOCATED(Intrinsic) (Line 33, file gyro_alloc_big.f90)
                   ALLOCATED(Intrinsic) (Line 54, file gyro_alloc_big.f90)
                   ALLOCATED(Intrinsic) (Line 166, file gyro_alloc_big.f90)
                   ALLOCATED(Intrinsic) (Line 167, file gyro_alloc_big.f90)
                   ALLOCATED(Intrinsic) (Line 168, file gyro_alloc_big.f90)
                   ALLOCATED(Intrinsic) (Line 169, file gyro_alloc_big.f90)
                   ALLOCATED(Intrinsic) (Line 173, file gyro_alloc_big.f90)
                   ALLOCATED(Intrinsic) (Line 176, file gyro_alloc_big.f90)
                   ALLOCATED(Intrinsic) (Line 193, file gyro_alloc_big.f90)

        Uses:      GYRO_GLOBALS
                   GYRO_POINTERS

Name  Messages
----  --------
GYRO_GLOBALS
      Defined as:  No definitions.

      Used By:     GYRO_ALLOC_BIG

Name  Messages
----  --------
GYRO_POINTERS
      Defined as:  No definitions.

      Used By:     GYRO_ALLOC_BIG

Name  Messages
----  --------
_ALLOCATED(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
