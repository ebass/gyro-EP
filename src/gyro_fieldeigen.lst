%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /global/u2/b/bassem/gyro-EP/src/gyro_fieldeigen.f90
Compiled : 01/19/21  15:35:37
Compiler : Version 9.1.0
Ftnlx    : Version 9.1.0 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hdynamic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -hnoomp -em
           -J/global/homes/b/bassem/gyro-EP/modules -sreal64 -eD -Ktrap=fp -m1
           -Rbcdps -G0 -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -c gyro_fieldeigen.f90
           -I/opt/cray/pe/cce/9.1.0/cce-clang/x86_64/lib/clang/9.0.0/include
           -I/opt/cray/pe/cce/9.1.0/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -I/opt/cray/pe/libsci/19.06.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.10/gni/mpich-cray/9.0/include
           -I/opt/cray/pe/hdf5/1.10.5.2/cray/9.0/include
           -I/opt/cray/pe/netcdf/4.6.3.2/cray/9.0/include
           -I/opt/cray/rca/2.2.20-7.0.1.1_4.53__g8e3fb5b.ari/include
           -I/opt/cray/alps/6.6.58-7.0.1.1_6.10__g437d88db.ari/include
           -I/opt/cray/xpmem/2.2.20-7.0.1.1_4.14__g0475745.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-7.0.1.1_6.32__g3b1768f.ari/include
           -I/opt/cray/dmapp/7.1.1-7.0.1.1_4.54__g38cf134.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/ugni/6.0.14.0-7.0.1.1_7.40__ge78e5b0.ari/include
           -I/opt/cray/udreg/2.3.2-7.0.1.1_3.38__g8175d3d.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.1.1_4.16__g7109084.ari/include
           -I/opt/cray/krca/2.2.6-7.0.1.1_5.39__gb641b12.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
Program
  Units  : GYRO_FIELDEIGEN

ftnlx report
------------
Source   : /global/u2/b/bassem/gyro-EP/src/gyro_fieldeigen.f90
Date     : 01/19/2021  15:35:37


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !-----------------------------------------------------------------
    2.    ! gyro_fieldeigen.f90
    3.    !
    4.    ! PURPOSE:
    5.    !  Solves the Maxwell dispersion matrix eigenvalue problem (in 
    6.    !  other word, the field equations) for the real frequency
    7.    !  and growth rate and computes the corresponding eigenfunctions.
    8.    !  We make heavy use of BLAS routines to ensure maximum performance
    9.    !  of most all matrix operations.
   10.    !
   11.    ! INPUT PARAMETERS:
   12.    !  FIELDEIGEN_ROOT_METHOD
   13.    !  FIELDEIGEN_WR
   14.    !  FIELDEIGEN_WI
   15.    !  FIELDEIGEN_TOL
   16.    !    
   17.    ! OUTPUT:
   18.    !  - fieldeigen.out
   19.    !  - eigenfunctions are written in balloon_*.out as usual.
   20.    !------------------------------------------------------------------
   21.    
   22.    subroutine gyro_fieldeigen
   23.    
   24.      use mpi
   25.      use gyro_globals
   26.      use gyro_pointers
   27.      use math_constants
   28.      use gyro_collision_private, only : nu_total
   29.      use gyro_fieldeigen_private
   30.    
   31.      !---------------------------------------------------------------
   32.      implicit none
   33.      !
   34.      ! Variables for calculation of parallel motion
   35.      !
   36.      real    :: v0
   37.      integer :: mff,mf
   38.      integer :: mc
   39.      integer :: mb,mbb
   40.      integer :: p  
   41.      complex :: pff,pf
   42.      complex :: pc
   43.      complex :: pb,pbb
   44.      !
   45.      ! Additional variables
   46.      !
   47.      complex :: f1,f2,f3
   48.      complex :: z1,z2,z3
   49.      complex :: dz
   50.      integer :: iw
   51.      complex :: a(3,3)
   52.      complex :: fv(3)
   53.      integer :: ipiv(3)
   54.      integer :: ierr
   55.      !---------------------------------------------------
   56.    
   57.      !-------------------------------------------------------------------------
   58.      ! Validity checks
   59.      !
   60.      if (boundary_method == 2) then
   61.         call catch_error('ERROR: (GYRO) BOUNDARY_METHOD=2 not supported in fieldeigen.')
   62.      endif
   63.    
   64.      if (n_1(in_1) == 0) then
   65.         call catch_error('ERROR: (GYRO) n=0 not supported in fieldeigen.')
   66.      endif
   67.    
   68.      if (electron_method == 2) then
   69.         call catch_error('ERROR: (GYRO) ELECTRON_METHOD=2 not supported in fieldeigen.')
   70.      endif
   71.      !-------------------------------------------------------------------------
   72.    
   73.      if (i_proc == 0 .and. output_flag == 1) then
   74.         open(unit=1,file=trim(path)//'fieldeigen.out',status='replace')
   75.         close(1)
   76.      endif
   77.      if (i_proc == 0 .and. silent_flag == 0) then
   78.         print *,' Re(omega)      Im(omega)      |det|          error'
   79.      endif
   80.    
   81.      !-------------------------------------------------------------
   82.      ! Collisionless allocations
   83.      !-------------------------------------------------------------
   84.    
   85.      n_eigen = n_x* n_blend*n_field
   86.      n_im    = n_x*n_stack
   87.    
   88.      allocate(vdotgrad(n_im,n_im,n_lambda,n_energy/n_proc,n_kinetic))
   89.      allocate(v_omegastar(n_x,n_lambda*n_stack))
   90.      allocate(fg(n_blend,-m_gyro:m_gyro-i_gyro,n_x,n_lambda*n_stack,n_field))
   91.    
   92.      allocate(a_eigen(n_eigen,n_eigen))
   93.      allocate(a_eigen_loc(n_eigen,n_eigen))
   94.      allocate(b_eigen(n_eigen))
   95.      allocate(i_piv_eigen(n_eigen))
   96.    
   97.      allocate(i_piv_im(n_im))
   98.      allocate(propinv(n_im,n_im))
   99.      allocate(prod(n_eigen,n_im))
  100.      allocate(work_im(n_im))
  101.      allocate(gk_left(n_eigen,n_im))
  102.      allocate(gk_right(n_im,n_eigen))
  103.    
  104.      allocate(diag_scale(n_eigen))
  105.    
  106.      diag_scale(:) = -1.0
ftn-6263 ftn: VECTOR GYRO_FIELDEIGEN, File = gyro_fieldeigen.f90, Line = 106 
  A loop starting at line 106 was not vectorized because it contains a reference to a non-vector intrinsic on line 106.

  107.    
  108.      !-----------------------------------------------------------------------
  109.      ! Extra setup required for collisions
  110.      !
  111.      if (collision_flag == 1) then
  112.    
  113.         n_imk = n_x*n_stack*n_lambda
  114.    
  115.         allocate(cmk(n_lambda*n_stack,n_x))
  116.         allocate(nu_op(n_lambda*n_stack,n_lambda*n_stack,n_x,n_energy/n_proc))
  117.    
  118.         allocate(i_piv_imk(n_imk))
  119.         allocate(propinvk(n_imk,n_imk))
  120.         allocate(prodk(n_eigen,n_imk))
  121.         allocate(work_imk(n_imk))
  122.         allocate(gk_leftk(n_eigen,n_imk))
  123.         allocate(gk_rightk(n_imk,n_eigen))
  124.    
  125.         ! Store collision operator in canonical storage format 
  126.         ! for fieldeigen.
  127.    
  128.         ! (1) define phase function
  129.    
  130.         do i=1,n_x
  131.            do m=1,n_stack
  132.               do k=1,n_lambda 
  133.                  mk = m+(k-1)*n_stack
  134.                  cmk(mk,i) = exp(i_c*angp(i)*theta_t(i,k,m))  
  135.               enddo
  136.            enddo
  137.         enddo
  138.    
  139.         ! (2) apply phase function and collision frequency to RBF derivative:
  140.    
  141.         do ie2=1,n_energy/n_proc
  142.            ie = ie2+i_proc_1*n_energy/n_proc
  143.            do i=1,n_x
  144.               do mk=1,n_lambda*n_stack 
  145.                  do mkp=1,n_lambda*n_stack
  146.    
  147.                     nu_op(mkp,mk,i,ie2) = nu_total(i,ie,indx_e)*&
  148.                          cmk(mkp,i)*d1_rbf(mkp,mk)/cmk(mk,i) 
  149.    
  150.                  enddo ! mkp
  151.               enddo ! mk
  152.            enddo ! i
  153.         enddo ! ie2
  154.    
  155.         deallocate(cmk)
  156.    
  157.      endif
  158.      !-----------------------------------------------------------------------
  159.    
  160.      !-----------------------------------------------------------------------
  161.      ! H-independent field equation pieces:
  162.      !
  163.      !  [-lambda^2 grad^2] phi
  164.      !  [-2*rho^2/beta grad^2 ] Apar
  165.      !  [1/beta_e] Bpar 
  166.      !
  167.      ! Note: do not need electron current pieces since em effects are
  168.      ! not valid for electron_method=1 and eigensolve not valid for
  169.      ! electron_method=2.
  170.      !
  171.      allocate(ap_mm(n_x,-m_gyro:m_gyro-i_gyro,n_blend,n_blend))
  172.      call gyro_blend_poisson(1)
  173.    
  174.      if (n_field > 1) then
  175.         allocate(aa_mm(n_x,-mg_dx:mg_dx-ig_dx,n_blend,n_blend))
  176.         call gyro_blend_ampere
  177.      endif
  178.    
  179.      if (n_field > 2) then
  180.         allocate(ab_mm(n_x,-m_gyro:m_gyro-i_gyro,n_blend,n_blend))
  181.         allocate(abp_mm(n_x,-m_gyro:m_gyro-i_gyro,n_blend,n_blend))
  182.         call gyro_blend_ampereperp
  183.      endif
  184.      !-----------------------------------------------------------------------
  185.    
  186.      !-----------------------------------------------------------------------
  187.      ! vdotgrad = (vpar b dot grad + v_d dot grad)
  188.      !
  189.      vdotgrad(:,:,:,:,:) = (0.0,0.0)
ftn-6263 ftn: VECTOR GYRO_FIELDEIGEN, File = gyro_fieldeigen.f90, Line = 189 
  A loop starting at line 189 was not vectorized because it contains a reference to a non-vector intrinsic on line 189.

  190.    
  191.      p_nek_loc = 0
  192.    
  193.      do ie2=1,n_energy/n_proc
  194.         ie =  ie2+i_proc_1*n_energy/n_proc
  195.         do k=1,n_lambda
  196.    
  197.            p_nek_loc = p_nek_loc+1
  198.    
  199.            ck = class(k)
  200.    
  201.            do is=1,n_kinetic
  202.               do i=1,n_x
  203.                  do m=1,n_stack
  204.    
  205.                     m0 = m_phys(ck,m)
  206.                     im = i + (m-1)*n_x
  207.    
  208.                     ! d/dr part of the drift + upwind
  209.                     do i_diff=-m_dx,m_dx-i_dx
  210.    
  211.                        ip = i_cyc(i+i_diff)
  212.    
  213.                        impr = ip + (m-1)*n_x
  214.    
  215.                        vdotgrad(im,impr,k,ie2,is) = &
  216.                             vdotgrad(im,impr,k,ie2,is) &
  217.                             - w_d1(i_diff)*omega_dr(m,i,p_nek_loc,is) &
  218.                             - s_d1(i_diff)*abs(omega_dr(m,i,p_nek_loc,is))
  219.    
  220.                     enddo
  221.    
  222.    
  223.                     vdotgrad(im,im,k,ie2,is) = &
  224.                          vdotgrad(im,im,k,ie2,is) &
  225.                          - i_c * omega_d1(m,i,p_nek_loc,is)
  226.    
  227.                     ! Sign flip for LHS
  228.                     v0 = -mu(is)*sqrt(tem_s(is,i))*v_theta(i,ie,k,is)/d_tau(ck)
  229.    
  230.                     p = p_phys(ck,m)
  231.    
  232.                     mff = m_cyc(ck,m+2,p)
  233.                     mf  = m_cyc(ck,m+1,p)
  234.                     mc  = m_cyc(ck,m,p)
  235.                     mb  = m_cyc(ck,m-1,p)
  236.                     mbb = m_cyc(ck,m-2,p)
  237.    
  238.                     pff = p_cyc(ck,i,m+2,p)
  239.                     pf  = p_cyc(ck,i,m+1,p)
  240.                     pc  = p_cyc(ck,i,m,p)
  241.                     pb  = p_cyc(ck,i,m-1,p)
  242.                     pbb = p_cyc(ck,i,m-2,p)
  243.    
  244.                     im  = i + (m-1)*n_x
  245.    
  246.                     impr = i + (mff-1)*n_x
  247.                     vdotgrad(im,impr,k,ie2,is) = &
  248.                          vdotgrad(im,impr,k,ie2,is) &
  249.                          + (-1.0/12.0)*pff*sigma_tau(ck,p)*v0
  250.    
  251.                     impr = i + (mf-1)*n_x
  252.                     vdotgrad(im,impr,k,ie2,is) = &
  253.                          vdotgrad(im,impr,k,ie2,is) &
  254.                          + (8.0/12.0)*pf*sigma_tau(ck,p)*v0
  255.    
  256.                     impr = i + (mb-1)*n_x   
  257.                     vdotgrad(im,impr,k,ie2,is) = &
  258.                          vdotgrad(im,impr,k,ie2,is) &
  259.                          + (-8.0/12.0)*pb*sigma_tau(ck,p)*v0
  260.    
  261.                     impr = i + (mbb-1)*n_x
  262.                     vdotgrad(im,impr,k,ie2,is) = &
  263.                          vdotgrad(im,impr,k,ie2,is) &
  264.                          + (1.0/12.0)*pbb*sigma_tau(ck,p)*v0
  265.    
  266.                  enddo ! m
  267.               enddo ! i
  268.            enddo ! is
  269.         enddo ! k
  270.      enddo ! ie2
  271.      !-----------------------------------------------------------------------
  272.    
  273.      select case (fieldeigen_root_method)
  274.    
  275.      case (1) 
  276.    
  277.         !-------------------------------------------------------------
  278.         ! Secant method for calculation of root:
  279.         !-------------------------------------------------------------
  280.    
  281.         ! Initial guess for omega
  282.    
  283.         z1 = fieldeigen_wr + i_c*fieldeigen_wi
  284.         if (abs(fieldeigen_wr) < 1e-10 .and. abs(fieldeigen_wi) < 1e-10) then
  285.            z2 = (fieldeigen_wr+0.001) +  i_c * (fieldeigen_wi + 0.001)
  286.         else
  287.            z2 = 1.001*z1
  288.         endif
  289.    
  290.    
  291.         do iw=-1,iwmax
  292.    
  293.            if (iw == -1) then
  294.               dz = (1.0,0.0)
  295.               omega_eigen = z1
  296.            else if (iw == 0) then
  297.               dz = (1.0,0.0)
  298.               omega_eigen = z2
  299.            else
  300.               dz = (z1-z2)/(f1-f2)*f1
  301.               if (abs(dz)/abs(omega_eigen) < fieldeigen_tol) then
  302.                  exit
  303.               endif
  304.               z2 = z1
  305.               z1 = z1-dz
  306.               omega_eigen = z1
  307.            endif
  308.    
  309.            !  INPUT: omega_eigen
  310.            ! OUTPUT: det
  311.            call gyro_fieldeigen_kernel
  312.    
  313.            error_eigen = abs(dz)/abs(omega_eigen) 
  314.    
  315.            if (i_proc == 0 .and. silent_flag == 0) then
  316.    
  317.               print '(t2,5(1pe14.7,1x))',&
  318.                    real(omega_eigen),&
  319.                    aimag(omega_eigen), &
  320.                    abs(det),&
  321.                    error_eigen
  322.    
  323.            endif
  324.            if (i_proc == 0 .and. output_flag == 1) then
  325.    
  326.               open(unit=1,file=trim(path)//'fieldeigen.out',status='old',position='append')
  327.    
  328.               write(1,'(t2,5(1pe14.7,1x))') &
  329.                    real(omega_eigen), &
  330.                    aimag(omega_eigen), &
  331.                    abs(det), &
  332.                    error_eigen
  333.    
  334.               close(1)
  335.    
  336.            endif
  337.    
  338.            if (iw == -1) then
  339.               f1 = det
  340.            else if (iw == 0) then
  341.               f2 = det
  342.            else
  343.               f2 = f1
  344.               f1 = det
  345.            endif
  346.    
  347.         enddo ! iw
  348.    
  349.      case (2)
  350.    
  351.         !-------------------------------------------------------------
  352.         ! Rational function method for calculation of root:
  353.         !-------------------------------------------------------------
  354.    
  355.         ! Initial guess for omega
  356.    
  357.         z1 = fieldeigen_wr + i_c*fieldeigen_wi
  358.         z2 = z1+(0.01,0.01)
  359.         z3 = z1-(0.01,0.01)
  360.    
  361.         do iw=-2,iwmax
  362.    
  363.            if (iw == -2) then
  364.               dz = (1.0,0.0)
  365.               omega_eigen = z1
  366.            else if (iw == -1) then
  367.               dz = (1.0,0.0)
  368.               omega_eigen = z2
  369.            else if (iw == 0) then
  370.               dz = (1.0,0.0)
  371.               omega_eigen = z3
  372.            else
  373.    
  374.               fv(1) = f1
  375.               fv(2) = f2
  376.               fv(3) = f3
  377.    
  378.               a(1,1) = 1.0
  379.               a(1,2) = z1
  380.               a(1,3) = -z1*f1
  381.    
  382.               a(2,1) = 1.0
  383.               a(2,2) = z2
  384.               a(2,3) = -z2*f2
  385.    
  386.               a(3,1) = 1.0
  387.               a(3,2) = z3
  388.               a(3,3) = -z3*f3
  389.    
  390.               ! LAPACK matrix factorization into L/U components
  391.               call ZGETRF(3,3,a,3,ipiv,ierr)
  392.    
  393.               ! LAPACK matrix solve
  394.               call ZGETRS('N',3,1,a,3,ipiv,fv,3,ierr)
  395.    
  396.               z3 = z2
  397.               z2 = z1
  398.               z1 = -fv(1)/fv(2)
  399.    
  400.               if (abs(z2-z1)/abs(z1) < fieldeigen_tol) then
  401.                  exit
  402.               endif
  403.    
  404.               omega_eigen = z1
  405.    
  406.            endif
  407.    
  408.            !  INPUT: omega_eigen
  409.            ! OUTPUT: det
  410.            call gyro_fieldeigen_kernel
  411.    
  412.            error_eigen = abs(z2-z1)/abs(omega_eigen) 
  413.    
  414.            if (i_proc == 0 .and. silent_flag == 0) then
  415.    
  416.               print '(t2,5(1pe14.7,1x))',&
  417.                    real(omega_eigen),&
  418.                    aimag(omega_eigen), &
  419.                    abs(det), &
  420.                    error_eigen
  421.    
  422.            endif
  423.            if (i_proc == 0 .and. output_flag == 1) then
  424.    
  425.               open(unit=1,file=trim(path)//'fieldeigen.out',status='old',position='append')
  426.    
  427.               write(1,'(t2,5(1pe14.7,1x))') &
  428.                    real(omega_eigen), &
  429.                    aimag(omega_eigen), &
  430.                    abs(det), &
  431.                    error_eigen
  432.    
  433.               close(1)
  434.    
  435.            endif
  436.    
  437.            if (iw == -2) then
  438.               f1 = det
  439.            else if (iw == -1) then
  440.               f2 = det
  441.            else if (iw == 0) then
  442.               f3 = det
  443.            else
  444.               f3 = f2
  445.               f2 = f1
  446.               f1 = det
  447.            endif
  448.    
  449.         enddo ! iw
  450.    
  451.      end select
  452.    
  453.      !----------------------------------------------------------------------------
  454.      ! Compute the eigenfunction
  455.      !
  456.      if (iw < iwmax) then
  457.    
  458.         ! Re-create a_eigen with the last (converged) eigenvalue
  459.    
  460.         a_eigen(:,:) = a_eigen_loc(:,:)
ftn-6262 ftn: VECTOR GYRO_FIELDEIGEN, File = gyro_fieldeigen.f90, Line = 460 
  A loop starting at line 460 was not vectorized because it contains a call to a subroutine or function on line 460.

  461.    
  462.         ! Impose an inhomogeneous constraint: c_phi(i_end,j_end) = 1.0
  463.         i  = n_x
  464.         j  = n_blend
  465.         ix = 1
  466.         ij = i + (j-1)*n_x
  467.         do ip=1,n_x
  468.            do jp=1,n_blend
  469.               do ixp=1,n_field
  470.    
  471.                  ijp = ip + (jp-1)*n_x + (ixp-1)*n_x*n_blend
  472.    
  473.                  if (ip == n_x .and. jp == n_blend .and. ixp == ix) then
  474.                     a_eigen(ij,ijp) = (1.0,0.0)
  475.                  else
  476.                     a_eigen(ij,ijp) = (0.0,0.0)
  477.                  endif
  478.               enddo
  479.            enddo
  480.         enddo
  481.         b_eigen(:) = (0.0,0.0)
ftn-6263 ftn: VECTOR GYRO_FIELDEIGEN, File = gyro_fieldeigen.f90, Line = 481 
  A loop starting at line 481 was not vectorized because it contains a reference to a non-vector intrinsic on line 481.

  482.         b_eigen(n_x*n_blend) = (1.0,0.0)
  483.    
  484.         ! Factorize and solve
  485.         call ZGETRF(n_eigen,n_eigen,a_eigen,n_eigen,i_piv_eigen,info_eigen)
  486.         call ZGETRS('N',n_eigen,1,a_eigen,n_eigen,i_piv_eigen, &
  487.              b_eigen,n_eigen,info_eigen)
  488.    
  489.         do i=1,n_x
  490.            do j=1,n_blend
  491.               ij  = i + (j-1)*n_x 
  492.               field_blend(j,i,1) = b_eigen(ij)
  493.            enddo
  494.         enddo
  495.         if (n_field > 1) then
  496.            do i=1,n_x
  497.               do j=1,n_blend
  498.                  ij  = i + (j-1)*n_x + n_x*n_blend
  499.                  field_blend(j,i,2) = b_eigen(ij)
  500.               enddo
  501.            enddo
  502.         endif
  503.         if (n_field > 2) then
  504.            do i=1,n_x
  505.               do j=1,n_blend
  506.                  ij  = i + (j-1)*n_x + 2*n_x*n_blend
  507.                  field_blend(j,i,3) = b_eigen(ij)
  508.               enddo
  509.            enddo
  510.         endif
  511.    
  512.      else
  513.    
  514.         error_eigen = 1.0
  515.    
  516.      endif
  517.    
  518.      !-------------------------------------------------------------------
  519.      ! Call plotting and other IO functions:
  520.      !
  521.      call gyro_fieldeigen_df
  522.      call gyro_field_fluxave
  523.    
  524.      ! In lieu of calling gyro_field_time_derivative, compute time 
  525.      ! derivatives for use in gyro_moments_plot
  526.      do is=1,n_kinetic
  527.         do i=1,n_x
  528.            do m=1,n_stack
  529.    
  530.               h_cap(m,i,:,is) = h(m,i,:,is) &
ftn-6262 ftn: VECTOR GYRO_FIELDEIGEN, File = gyro_fieldeigen.f90, Line = 530 
  A loop starting at line 530 was not vectorized because it contains a call to a subroutine or function on line 530.

  531.                    +z(is)*alpha_s(is,i)*gyro_u(m,i,:,is)
  532.    
  533.            enddo ! m
  534.         enddo ! i
  535.      enddo ! is
  536.      field_blend_dot(:,:,:) = -i_c*omega_eigen*field_blend(:,:,:)
ftn-6262 ftn: VECTOR GYRO_FIELDEIGEN, File = gyro_fieldeigen.f90, Line = 536 
  A loop starting at line 536 was not vectorized because it contains a call to a subroutine or function on line 536.

  537.      gyro_uv_dot(:,:,:,:,:) = -i_c*omega_eigen*gyro_uv(:,:,:,:,:)
ftn-6262 ftn: VECTOR GYRO_FIELDEIGEN, File = gyro_fieldeigen.f90, Line = 537 
  A loop starting at line 537 was not vectorized because it contains a call to a subroutine or function on line 537.

  538.      h_cap_dot(:,:,:,:)     = -i_c*omega_eigen*h_cap(:,:,:,:)
ftn-6262 ftn: VECTOR GYRO_FIELDEIGEN, File = gyro_fieldeigen.f90, Line = 538 
  A loop starting at line 538 was not vectorized because it contains a call to a subroutine or function on line 538.

  539.    
  540.      call gyro_field_plot
  541.      call gyro_moments_plot
  542.      call gyro_write_timedata
  543.      step = 1
  544.      call gyro_write_precision(10,abs(omega_eigen))
  545.      !-------------------------------------------------------------------
  546.    
  547.      !-------------------------------------------------------------------
  548.      ! Clean-up
  549.    
  550.      deallocate(ap_mm)
  551.    
  552.      if (n_field > 1) then
  553.         deallocate(aa_mm)
  554.      endif
  555.    
  556.      if(n_field == 3) then
  557.         deallocate(ab_mm)
  558.         deallocate(abp_mm)
  559.      endif
  560.    
  561.      deallocate(vdotgrad)
  562.      deallocate(v_omegastar)
  563.      deallocate(fg)
  564.    
  565.      deallocate(a_eigen)
  566.      deallocate(a_eigen_loc)
  567.      deallocate(b_eigen)
  568.      deallocate(i_piv_eigen)
  569.    
  570.      deallocate(i_piv_im)
  571.      deallocate(propinv)
  572.      deallocate(prod)
  573.      deallocate(work_im)
  574.      deallocate(gk_left)
  575.      deallocate(gk_right)
  576.    
  577.      deallocate(diag_scale)
  578.    
  579.      if (collision_flag == 1) then
  580.         deallocate(nu_op)
  581.         deallocate(i_piv_imk)
  582.         deallocate(propinvk)
  583.         deallocate(prodk)
  584.         deallocate(work_imk)
  585.         deallocate(gk_leftk)
  586.         deallocate(gk_rightk)
  587.      endif
  588.      !-------------------------------------------------------------------
  589.    
  590.    end subroutine gyro_fieldeigen
ftn-5001 ftn: NOTE GYRO_FIELDEIGEN, File = gyro_fieldeigen.f90, Line = 590 
  Local variable "PC" is assigned a value but never used.

ftn-5001 ftn: NOTE GYRO_FIELDEIGEN, File = gyro_fieldeigen.f90, Line = 590 
  Local variable "MC" is assigned a value but never used.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                     C o m m o n   B l o c k   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIFCMB5/                            Length: 4 bytes

     GYRO_FIELDEIGEN                  Block is used from MPI_CONSTANTS

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIFCMB9/                            Length: 4 bytes

     GYRO_FIELDEIGEN                  Block is used from MPI_CONSTANTS

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV1/                            Length: 28 bytes

     GYRO_FIELDEIGEN                  Block is used from MPI_CONSTANTS

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV2/                            Length: 24 bytes

     GYRO_FIELDEIGEN                  Block is used from MPI_CONSTANTS

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIVC/                            Length: 2 bytes

     GYRO_FIELDEIGEN                  Block is used from MPI_CONSTANTS


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 218, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 284, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 284, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 301, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 301, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 313, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 313, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 320, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 331, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 400, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 400, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 412, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 412, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 419, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 430, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 544, file gyro_fieldeigen.f90)

Name  Messages
----  --------
AIMAG(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 319, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 330, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 418, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 429, file gyro_fieldeigen.f90)

Name  Messages
----  --------
CATCH_ERROR
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 61, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 65, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 69, file gyro_fieldeigen.f90)

Name  Messages
----  --------
CHAR(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
COMMEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
COMMNEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DATATYPEEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DATATYPENEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ERRHANDLEREQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ERRHANDLERNEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
EXP(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 134, file gyro_fieldeigen.f90)

Name  Messages
----  --------
FILEEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FILENEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GROUPEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GROUPNEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_BLEND_AMPERE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_BLEND_AMPEREPERP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_BLEND_POISSON
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_COLLISION_PRIVATE
      Defined as:  No definitions.

      Used By:     GYRO_FIELDEIGEN

Name  Messages
----  --------
GYRO_FIELDEIGEN
      Defined as:  Subroutine (line 22, file gyro_fieldeigen.f90)

      Interface:   None

      Calls:       CATCH_ERROR (Line 61, file gyro_fieldeigen.f90)
                   CATCH_ERROR (Line 65, file gyro_fieldeigen.f90)
                   CATCH_ERROR (Line 69, file gyro_fieldeigen.f90)
                   TRIM(Intrinsic) (Line 74, file gyro_fieldeigen.f90)
                   TRIM(Intrinsic) (Line 326, file gyro_fieldeigen.f90)
                   TRIM(Intrinsic) (Line 425, file gyro_fieldeigen.f90)
                   EXP(Intrinsic) (Line 134, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 218, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 284, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 284, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 301, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 301, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 313, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 313, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 320, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 331, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 400, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 400, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 412, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 412, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 419, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 430, file gyro_fieldeigen.f90)
                   ABS(Intrinsic) (Line 544, file gyro_fieldeigen.f90)
                   SQRT(Intrinsic) (Line 228, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN_KERNEL (Line 311, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN_KERNEL (Line 410, file gyro_fieldeigen.f90)
                   REAL(Intrinsic) (Line 318, file gyro_fieldeigen.f90)
                   REAL(Intrinsic) (Line 329, file gyro_fieldeigen.f90)
                   REAL(Intrinsic) (Line 417, file gyro_fieldeigen.f90)
                   REAL(Intrinsic) (Line 428, file gyro_fieldeigen.f90)
                   AIMAG(Intrinsic) (Line 319, file gyro_fieldeigen.f90)
                   AIMAG(Intrinsic) (Line 330, file gyro_fieldeigen.f90)
                   AIMAG(Intrinsic) (Line 418, file gyro_fieldeigen.f90)
                   AIMAG(Intrinsic) (Line 429, file gyro_fieldeigen.f90)
                   ZGETRF (Line 391, file gyro_fieldeigen.f90)
                   ZGETRF (Line 485, file gyro_fieldeigen.f90)
                   ZGETRS (Line 394, file gyro_fieldeigen.f90)
                   ZGETRS (Line 486, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN_DF (Line 521, file gyro_fieldeigen.f90)
                   GYRO_FIELD_FLUXAVE (Line 522, file gyro_fieldeigen.f90)
                   GYRO_FIELD_PLOT (Line 540, file gyro_fieldeigen.f90)
                   GYRO_MOMENTS_PLOT (Line 541, file gyro_fieldeigen.f90)
                   GYRO_WRITE_TIMEDATA (Line 542, file gyro_fieldeigen.f90)
                   GYRO_WRITE_PRECISION (Line 544, file gyro_fieldeigen.f90)

        Uses:      MPI
                   MPI_BASE  (indirectly)
                   MPI_SIZEOFS  (indirectly)
                   MPI_CONSTANTS  (indirectly)
                   GYRO_GLOBALS
                   GYRO_POINTERS
                   MATH_CONSTANTS
                   GYRO_COLLISION_PRIVATE
                   GYRO_FIELDEIGEN_PRIVATE

Name  Messages
----  --------
GYRO_FIELDEIGEN_DF
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 521, file gyro_fieldeigen.f90)

Name  Messages
----  --------
GYRO_FIELDEIGEN_KERNEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 311, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 410, file gyro_fieldeigen.f90)

Name  Messages
----  --------
GYRO_FIELDEIGEN_PRIVATE
      Defined as:  No definitions.

      Used By:     GYRO_FIELDEIGEN

Name  Messages
----  --------
GYRO_FIELD_FLUXAVE
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 522, file gyro_fieldeigen.f90)

Name  Messages
----  --------
GYRO_FIELD_PLOT
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 540, file gyro_fieldeigen.f90)

Name  Messages
----  --------
GYRO_GLOBALS
      Defined as:  No definitions.

      Used By:     GYRO_FIELDEIGEN

Name  Messages
----  --------
GYRO_MOMENTS_PLOT
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 541, file gyro_fieldeigen.f90)

Name  Messages
----  --------
GYRO_POINTERS
      Defined as:  No definitions.

      Used By:     GYRO_FIELDEIGEN

Name  Messages
----  --------
GYRO_WRITE_PRECISION
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 544, file gyro_fieldeigen.f90)

Name  Messages
----  --------
GYRO_WRITE_TIMEDATA
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 542, file gyro_fieldeigen.f90)

Name  Messages
----  --------
INFOEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INFONEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MATH_CONSTANTS
      Defined as:  No definitions.

      Used By:     GYRO_FIELDEIGEN

Name  Messages
----  --------
MESSAGEEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MESSAGENEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI
      Defined as:  No definitions.

      Used By:     GYRO_FIELDEIGEN

Name  Messages
----  --------
MPI_BASE
      Defined as:  No definitions.

      Used By:     GYRO_FIELDEIGEN  (indirectly)

Name  Messages
----  --------
MPI_CONSTANTS
      Defined as:  No definitions.

      Used By:     GYRO_FIELDEIGEN  (indirectly)

Name  Messages
----  --------
MPI_SIZEOFS
      Defined as:  No definitions.

      Used By:     GYRO_FIELDEIGEN  (indirectly)

Name  Messages
----  --------
MPI_SIZEOF_CH in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_CHV in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_CX in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_CXV in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_D in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_DV in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_I in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_I1 in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_I1V in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_I2 in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_I2V in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_I8 in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_I8V in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_IV in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_L in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_LV in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_R in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_SIZEOF_RV in MPI_SIZEOFS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
OPEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
OPNEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 318, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 329, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 417, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 428, file gyro_fieldeigen.f90)

Name  Messages
----  --------
REQUESTEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
REQUESTNEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SQRT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 228, file gyro_fieldeigen.f90)

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 74, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 326, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 425, file gyro_fieldeigen.f90)

Name  Messages
----  --------
WINEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WINNEQ in MPI_CONSTANTS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ZGETRF
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 391, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 485, file gyro_fieldeigen.f90)

Name  Messages
----  --------
ZGETRS
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_FIELDEIGEN (Line 394, file gyro_fieldeigen.f90)
                   GYRO_FIELDEIGEN (Line 486, file gyro_fieldeigen.f90)

Name  Messages
----  --------
_F90_TRIM(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
