%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /global/u2/b/bassem/gyro-EP/src/gyro_banana_operators.f90
Compiled : 01/19/21  15:35:29
Compiler : Version 9.1.0
Ftnlx    : Version 9.1.0 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hdynamic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -hnoomp -em
           -J/global/homes/b/bassem/gyro-EP/modules -sreal64 -eD -Ktrap=fp -m1
           -Rbcdps -G0 -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -c gyro_banana_operators.f90
           -I/opt/cray/pe/cce/9.1.0/cce-clang/x86_64/lib/clang/9.0.0/include
           -I/opt/cray/pe/cce/9.1.0/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -I/opt/cray/pe/libsci/19.06.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.10/gni/mpich-cray/9.0/include
           -I/opt/cray/pe/hdf5/1.10.5.2/cray/9.0/include
           -I/opt/cray/pe/netcdf/4.6.3.2/cray/9.0/include
           -I/opt/cray/rca/2.2.20-7.0.1.1_4.53__g8e3fb5b.ari/include
           -I/opt/cray/alps/6.6.58-7.0.1.1_6.10__g437d88db.ari/include
           -I/opt/cray/xpmem/2.2.20-7.0.1.1_4.14__g0475745.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-7.0.1.1_6.32__g3b1768f.ari/include
           -I/opt/cray/dmapp/7.1.1-7.0.1.1_4.54__g38cf134.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/ugni/6.0.14.0-7.0.1.1_7.40__ge78e5b0.ari/include
           -I/opt/cray/udreg/2.3.2-7.0.1.1_3.38__g8175d3d.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.1.1_4.16__g7109084.ari/include
           -I/opt/cray/krca/2.2.6-7.0.1.1_5.39__gb641b12.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
Program
  Units  : GYRO_BANANA_OPERATORS

ftnlx report
------------
Source   : /global/u2/b/bassem/gyro-EP/src/gyro_banana_operators.f90
Date     : 01/19/2021  15:35:29


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !-----------------------------------------------------
    2.    ! gyro_banana_operators.f90
    3.    !
    4.    ! PURPOSE:
    5.    !  Compute arrays connected with solution in theta 
    6.    !  direction. 
    7.    ! 
    8.    ! NOTES:
    9.    !
   10.    ! Pointers are allocated with enough tau's for
   11.    ! trapped particles.  The alternative is to 
   12.    ! have separate theta_t's and tau's for trapped 
   13.    ! and passing particles.  We don't want that.
   14.    !
   15.    !  - m_map(ck,j,p) 
   16.    !
   17.    !   returns index along orbit (tau-direction) for a 
   18.    !   given real position in theta (j) and sign of 
   19.    !   velocity.
   20.    !
   21.    !  - theta_t(k,m)
   22.    !
   23.    !   the physical poloidal angle, theta, corresponding 
   24.    !   to tau(k,m) (below).
   25.    !
   26.    !  - tau(k,m)
   27.    !  
   28.    !   normalized time along orbit.
   29.    !
   30.    !  - m_cyc(n_class,<wider than n_stack>,2)
   31.    !
   32.    !   Cyclic version of m-index.
   33.    !
   34.    !  - p_cyc(n_class,<wider than n_stack>,2)
   35.    !
   36.    !   Cyclic version of phase multiplier.
   37.    !-----------------------------------------------------
   38.    
   39.    subroutine gyro_banana_operators
   40.    
   41.      use gyro_globals
   42.      use math_constants
   43.    
   44.      !-------------------------------------------
   45.      implicit none
   46.      !
   47.      integer :: p
   48.      !
   49.      real :: period
   50.      real :: banana_theta(n_tau(1)+1)
   51.      real :: banana_tau(n_tau(1)+1)
   52.      !-------------------------------------------
   53.    
   54.    
   55.      m_cyc = 0
ftn-6209 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 55 
  A loop starting at line 55 was partially vectorized.

   56.    
   57.      ! Physical signs of velocity (needed only for finite-beta coding).
   58.    
   59.      ! ** Passing **
   60.    
   61.      do i=1,n_x
   62.    
   63.         call gyro_to_geo(i)
   64.    
   65.         call gyro_banana_init(nint_ORB_s)
   66.    
   67.         do k=1,n_pass
   68.    
   69.            class(k) = 1
   70.    
   71.            ck = class(k)
   72.    
   73.            sigma(ck,1) = -1.0
   74.            sigma(ck,2) = 1.0
   75.    
   76.            do m=1,n_stack
   77.               if (m <= n_theta(ck)) then
   78.                  m_phys(ck,m) = m
   79.                  p_phys(ck,m) = 1
   80.               else
   81.                  m_phys(ck,m) = m-n_theta(ck)
   82.                  p_phys(ck,m) = 2
   83.               endif
   84.            enddo
   85.    
   86.            do j=1,n_theta(ck)
   87.    
   88.               m_cyc(ck,j+n_theta(ck),1) = j
   89.               p_cyc(ck,:,j+n_theta(ck),1) = phase(in_1,:)
ftn-6262 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 89 
  A loop starting at line 89 was not vectorized because it contains a call to a subroutine or function on line 89.

   90.    
   91.               m_cyc(ck,j-n_theta(ck),1) = j
   92.               p_cyc(ck,:,j-n_theta(ck),1) = 1.0/phase(in_1,:)
ftn-6262 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 92 
  A loop starting at line 92 was not vectorized because it contains a call to a subroutine or function on line 92.

   93.    
   94.               ! Primary (v<0)
   95.               m_cyc(ck,j,1) = j
   96.               p_cyc(ck,:,j,1) = 1.0
ftn-6263 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 96 
  A loop starting at line 96 was not vectorized because it contains a reference to a non-vector intrinsic on line 96.

   97.    
   98.               m = j+n_theta(ck)
   99.    
  100.               m_cyc(ck,m+n_theta(ck),2) = m
  101.               p_cyc(ck,:,m+n_theta(ck),2) = phase(in_1,:)
ftn-6262 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 101 
  A loop starting at line 101 was not vectorized because it contains a call to a subroutine or function on line 101.

  102.    
  103.               m_cyc(ck,m-n_theta(ck),2) = m
  104.               p_cyc(ck,:,m-n_theta(ck),2) = 1.0/phase(in_1,:)
ftn-6262 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 104 
  A loop starting at line 104 was not vectorized because it contains a call to a subroutine or function on line 104.

  105.    
  106.               ! Primary (v>0)
  107.               m_cyc(ck,m,2) = m
  108.               p_cyc(ck,:,m,2) = 1.0
ftn-6263 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 108 
  A loop starting at line 108 was not vectorized because it contains a reference to a non-vector intrinsic on line 108.

  109.    
  110.            enddo
  111.    
  112.            do j=1,n_theta(ck)
  113.               m_map(ck,j,1) = j
  114.               m_map(ck,j,2) = j+n_theta(ck)
  115.            enddo
  116.    
  117.            call gyro_banana_uniform_taugrid(lambda(i,k),&
  118.                 n_tau(1)+1,&
  119.                 nint_ORB_do,&
  120.                 banana_theta,&
  121.                 banana_tau)
  122.    
  123.            ! Parameterization of entire orbit, given 
  124.            ! the passing orbit computed by ORB library.
  125.    
  126.            period = banana_tau(n_tau(1)+1)
  127.    
  128.            do j=1,n_tau(1)
  129.    
  130.               tau(i,k,j)           = banana_tau(j)/period
  131.               tau(i,k,j+n_stack/2) = tau(i,k,j)
  132.    
  133.               theta_t(i,k,j)           = banana_theta(j)
  134.               theta_t(i,k,j+n_stack/2) = theta_t(i,k,j)
  135.    
  136.            enddo
  137.    
  138.            ! omega(k) => coefficient of d/d_tau
  139.    
  140.            omega(i,k) = 1.0/period
  141.    
  142.         enddo
  143.    
  144.         do k=n_pass+1,n_lambda
  145.    
  146.            ! ** Trapped **
  147.    
  148.            class(k) = 2
  149.    
  150.            ck = class(k)
  151.    
  152.            sigma(ck,1) = -1.0
  153.            sigma(ck,2) = 1.0
  154.    
  155.            do m=1,n_stack
  156.               if (m < n_theta(ck)) then
  157.                  m_phys(ck,m) = m
  158.                  p_phys(ck,m) = 1
  159.               else
  160.                  m_phys(ck,m) = n_stack-m+2
  161.                  p_phys(ck,m) = 2
  162.               endif
  163.            enddo
  164.    
  165.            do j=1,n_stack
  166.               m_cyc(ck,j+n_stack,:) = j
ftn-6263 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 166 
  A loop starting at line 166 was not vectorized because it contains a reference to a non-vector intrinsic on line 166.

  167.               p_cyc(ck,:,j+n_stack,:) = 1.0
ftn-6263 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 167 
  A loop starting at line 167 was not vectorized because it contains a reference to a non-vector intrinsic on line 167.

  168.               m_cyc(ck,j,:) = j
ftn-6263 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 168 
  A loop starting at line 168 was not vectorized because it contains a reference to a non-vector intrinsic on line 168.

  169.               p_cyc(ck,:,j,:) = 1.0
ftn-6263 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 169 
  A loop starting at line 169 was not vectorized because it contains a reference to a non-vector intrinsic on line 169.

  170.               m_cyc(ck,j-n_stack,:) = j
ftn-6263 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 170 
  A loop starting at line 170 was not vectorized because it contains a reference to a non-vector intrinsic on line 170.

  171.               p_cyc(ck,:,j-n_stack,:) = 1.0
ftn-6263 ftn: VECTOR GYRO_BANANA_OPERATORS, File = gyro_banana_operators.f90, Line = 171 
  A loop starting at line 171 was not vectorized because it contains a reference to a non-vector intrinsic on line 171.

  172.            enddo
  173.    
  174.            do j=1,n_theta(ck)
  175.               m_map(ck,j,1) = j
  176.               m_map(ck,j,2) = n_tau(ck)-j+2
  177.            enddo
  178.            m_map(ck,1,2) = 1
  179.    
  180.            call gyro_banana_uniform_taugrid(lambda(i,k),&
  181.                 n_tau(1)+1,&
  182.                 nint_ORB_do,&
  183.                 banana_theta,&
  184.                 banana_tau)
  185.    
  186.            ! Parameterization of entire orbit, given
  187.            ! the trapped orbit computed by ORB library.
  188.    
  189.            ! Period here is really a half-period
  190.    
  191.            period = banana_tau(n_tau(1)+1)
  192.    
  193.            do j=1,n_tau(1)+1
  194.               tau(i,k,j)     = banana_tau(j)/period
  195.               theta_t(i,k,j) = banana_theta(j)
  196.            enddo
  197.            do j=2,n_tau(1)
  198.               tau(i,k,j+n_tau(1)) = 2*tau(i,k,n_tau(1)+1)-tau(i,k,n_tau(1)+2-j)
  199.               theta_t(i,k,j+n_tau(1)) = banana_theta(n_tau(1)+2-j)
  200.            enddo
  201.    
  202.            ! omega(k) => coefficient of d/d_tau
  203.    
  204.            omega(i,k) = 1.0/period
  205.    
  206.         enddo
  207.    
  208.      enddo ! i
  209.    
  210.      !----------------------------------------------------
  211.      ! Theta grid for solution of Maxwell equations:
  212.      ! (evenly-spaced on [-pi,pi])
  213.      !
  214.      do j=1,n_theta_int
  215.         theta_int(j) = -pi+(j-1)*pi_2/n_theta_int
  216.      enddo
  217.    
  218.      if (n_theta_plot > 1) then
  219.    
  220.         ! Span [-pi,pi]
  221.    
  222.         do j=1,n_theta_plot
  223.            theta_plot(j) = -pi+(j-1)*pi_2/n_theta_plot
  224.         enddo
  225.    
  226.      else
  227.    
  228.         ! Special case for one point: 
  229.         !  only theta=0 (outboard midplane)
  230.    
  231.         theta_plot(1) = 0.0
  232.    
  233.      endif
  234.    
  235.      !
  236.      ! Print the grid to stdout:
  237.      !
  238.      if (i_proc == 0 .and. verbose_flag == 1) then
  239.    
  240.         i = ir_norm
  241.    
  242.         print *
  243.         print *,' Interpolation Grid'
  244.         print *,'-------------------'
  245.         do j_int=1,n_theta_int
  246.            print 10,j_int,theta_int(j_int)
  247.         enddo
  248.    
  249.         print *
  250.         print *,' Passing tau grid'
  251.         print *,'------------------'
  252.         do m=1,n_stack
  253.            print 10,m,tau(i,1,m),theta_t(i,1:n_pass,m)
  254.         enddo
  255.    
  256.         print *
  257.         print *,' Trapped tau grid'
  258.         print *,'------------------'
  259.         do m=1,n_stack
  260.            print 10,m,tau(i,n_lambda,m),theta_t(i,n_pass+1:n_lambda,m)
  261.         enddo
  262.    
  263.         print *
  264.         print *,' tau_hat grid'
  265.         print *,'------------------'
  266.         do k=1,n_lambda
  267.            print 10,k,lambda(i,k),1/omega(i,k)
  268.         enddo
  269.      endif
  270.      !--------------------------------------------------------
  271.    
  272.      !--------------------------------------------------------
  273.      ! sigma-related operator for gyro_tau_derivative vectorization:
  274.      !
  275.      do ck=1,2
  276.         do p=1,2
  277.            if (ck == 2) then
  278.               sigma_tau(ck,p) = 1.0
  279.            else
  280.               sigma_tau(ck,p) = -sigma(ck,p)
  281.            endif
  282.         enddo ! p
  283.      enddo ! ck
  284.      !--------------------------------------------------------
  285.    
  286.      if (debug_flag == 1 .and. i_proc == 0) then
  287.         print *,'[gyro_banana_operators done]'
  288.      endif
  289.    
  290.    10 format(i2,2x,6(f12.9,1x))
  291.    
  292.    end subroutine gyro_banana_operators


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
CHAR(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_BANANA_INIT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GYRO_BANANA_OPERATORS
      Defined as:  Subroutine (line 39, file gyro_banana_operators.f90)

      Interface:   None

      Calls:       GYRO_BANANA_UNIFORM_TAUGRID (Line 180, file gyro_banana_operators.f90)

        Uses:      GYRO_GLOBALS
                   MATH_CONSTANTS

Name  Messages
----  --------
GYRO_BANANA_UNIFORM_TAUGRID
      Defined as:  No definitions.

      Interface:   None

      Called By:   GYRO_BANANA_OPERATORS (Line 180, file gyro_banana_operators.f90)

Name  Messages
----  --------
GYRO_GLOBALS
      Defined as:  No definitions.

      Used By:     GYRO_BANANA_OPERATORS

Name  Messages
----  --------
GYRO_TO_GEO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MATH_CONSTANTS
      Defined as:  No definitions.

      Used By:     GYRO_BANANA_OPERATORS


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
