%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /global/u2/b/bassem/gyro-EP/shared/math/ifs_pppl.f90
Compiled : 01/19/21  14:38:38
Compiler : Version 9.1.0
Ftnlx    : Version 9.1.0 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hdynamic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -hnoomp -em
           -J/global/homes/b/bassem/gyro-EP/modules -sreal64 -eD -Ktrap=fp -m1
           -Rbcdps -c ifs_pppl.f90
           -I/opt/cray/pe/cce/9.1.0/cce-clang/x86_64/lib/clang/9.0.0/include
           -I/opt/cray/pe/cce/9.1.0/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -I/opt/cray/pe/libsci/19.06.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.10/gni/mpich-cray/9.0/include
           -I/opt/cray/pe/hdf5/1.10.5.2/cray/9.0/include
           -I/opt/cray/pe/netcdf/4.6.3.2/cray/9.0/include
           -I/opt/cray/rca/2.2.20-7.0.1.1_4.53__g8e3fb5b.ari/include
           -I/opt/cray/alps/6.6.58-7.0.1.1_6.10__g437d88db.ari/include
           -I/opt/cray/xpmem/2.2.20-7.0.1.1_4.14__g0475745.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-7.0.1.1_6.32__g3b1768f.ari/include
           -I/opt/cray/dmapp/7.1.1-7.0.1.1_4.54__g38cf134.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/ugni/6.0.14.0-7.0.1.1_7.40__ge78e5b0.ari/include
           -I/opt/cray/udreg/2.3.2-7.0.1.1_3.38__g8175d3d.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.1.1_4.16__g7109084.ari/include
           -I/opt/cray/krca/2.2.6-7.0.1.1_5.39__gb641b12.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
Program
  Units  : IFS_PPPL

ftnlx report
------------
Source   : /global/u2/b/bassem/gyro-EP/shared/math/ifs_pppl.f90
Date     : 01/19/2021  14:38:38


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !-------------------------------------------------------------------------
    2.    ! ifs_pppl.f90
    3.    !
    4.    ! PURPOSE:
    5.    !  Evaluate electron and ion heat flux, as return critical gradients,
    6.    !  using the (infamous) IFS-PPPL model.
    7.    !
    8.    ! NOTES:
    9.    !  - Converted to Fortran 90 and simplified (Nov 2007).
   10.    !  - Original documentation also cleaned up (see below).
   11.    !-------------------------------------------------------------------------
   12.    
   13.    !-------------------------------------------------------------------------
   14.    ! ORIGINAL DOCUMENTATION:
   15.    !
   16.    ! The formulas embodied in this subroutine are documented in the Physics
   17.    ! of Plasmas article entitled Quantitative Predictions of Tokamak Energy 
   18.    ! Confinement from First-Principles Simulations with Kinetic Effects, 
   19.    ! by M. Kotschenreuther, W. Dorland, M.A. Beer, and G.W. Hammett, 
   20.    ! Vol. 2, p. 2381, (1995).  Extensions to non-circular cross-sections are
   21.    ! described below. 
   22.    !
   23.    ! There is a significant typographical error in that paper.  R/Ln* is 
   24.    ! defined to be max(6,R/Ln); it should be min(6,R/Ln) as defined in 
   25.    ! this subroutine.
   26.    !
   27.    ! Also, note that in deriving these formulas, we assumed that the 
   28.    ! density gradient scale lengths for the different species were equal. 
   29.    ! This is an approximation that needs to be relaxed.
   30.    !
   31.    ! As emphasized in the paper, these formulas were derived numerically and 
   32.    ! are therefore not trustworthy outside a particular region of parameter 
   33.    ! space.  For example, we did not parameterize the heat flux in the weak 
   34.    ! magnetic shear limit; thus, one should not use the model in this limit.
   35.    ! I have attempted to reduce related strange numerical behaviors by 
   36.    ! limiting some inputs to be roughly within their range of validity.  
   37.    !
   38.    ! Stifness:
   39.    ! ---------
   40.    ! For many cases that we have simulated, the transport equations
   41.    ! tend to be very stiff.  That is, the plasma temperature gradient scale 
   42.    ! length tends to adjust itself to be close to the critical gradient scale
   43.    ! length over some region of the plasma, because chi becomes very large
   44.    ! very fast for shorter temperature gradient scale lengths.  Typically, 
   45.    ! we have had to be very careful with the numerical algorithm used in the 
   46.    ! transport equation solver with this experience in mind.  The details 
   47.    ! of our implementation are available to anyone that is interested.
   48.    !
   49.    ! Geometry:
   50.    ! --------
   51.    ! The nonlinear simulations that were done to obtain these formulas were 
   52.    ! mostly done in a simplified geometry, using a shifted circle, low beta, 
   53.    ! high aspect ratio expansion.  Some modifications due to more sophisticated 
   54.    ! geometrical models have been calculated and have been included here, 
   55.    ! but should be considered preliminary.  There are two important issues 
   56.    ! that must be noted.  First, we derived our formulas using a different 
   57.    ! radial coordinate.  Second, since we are actually calculating the 
   58.    ! transport coefficients in general geometry, we require less assumptions 
   59.    ! for the form of the transport equation to be solved.  
   60.    !
   61.    ! Let me describe the <|grad rho|> issue first:
   62.    !
   63.    !     The database standard modeling assumptions that were agreed upon for
   64.    !     this exercise include the assumption that the anomalous fluxes for 
   65.    !     non-circular cross-sections are simply related to the anomalous 
   66.    !     fluxes for related circular cross-section plasmas.  That is, in order 
   67.    !     to get the factor of < |grad rho|**2 > that appears as a coefficient 
   68.    !     of chi in the energy transport equations, one assumes that 
   69.    !
   70.    !     chi_anom_general = chi_anom_circular * (grad rho).
   71.    !
   72.    !     One need not make this assumption; one can just calculate the quantity 
   73.    !     chi_anom_general directly.  One would then have a transport equation
   74.    !     of the form
   75.    !
   76.    !     (3/2) d(n T)/dt = 
   77.    !            (1/V') d/drho V' <|grad rho|> n chi d/drho(T)] + ...
   78.    !
   79.    !     in which (grad rho) appears to the first power, rather than the second,
   80.    !     and chi is the thermal diffusivity from a general geometry theory.
   81.    !
   82.    !     This is arguably the better way to proceed, since 
   83.    !
   84.    !         Vprime <|grad rho|> = A
   85.    !
   86.    !     where A is the surface area.  In this form, the quantity 
   87.    !
   88.    !          -n chi dT/drho 
   89.    !
   90.    !     can be identified as the heat flux per unit area, a natural 
   91.    !     quantity from a theoretical/simulation point of view.  This chi is 
   92.    !     the quantity returned by this subroutine.
   93.    !
   94.    !     If you are solving the transport equations in the form that
   95.    !     the ITER Expert Group agreed upon, e.g., 
   96.    !
   97.    !     (3/2) d(n T)/dt = 
   98.    !        (1/V') d/drho V' <|grad rho|**2> n chi d/drho(T)] + ...
   99.    !
  100.    !     then you need to multiply the chi_i and chi_e reported by this 
  101.    !     subroutine by the factor <|grad rho|>/<|grad rho|**2>.  This should
  102.    !     result in only small corrections to the predicted profiles.
  103.    !
  104.    ! The choice of radial coordinate is more difficult to resolve:
  105.    !
  106.    !     We did not use the sqrt(toroidal flux) radial coordinate in our 
  107.    !     non-circular cross-section simulations.  Instead, we used "rho_d", 
  108.    !     where rho_d is defined to be the average horizontal minor radius 
  109.    !     at the elevation of the magnetic axis, normalized to the value of 
  110.    !     this quantity at the LCFS.
  111.    !
  112.    !     In other words, denote by "d" the horizontal diameter of a given flux 
  113.    !     surface measured at the elevation of the magnetic axis.  Denote by
  114.    !     "D" the horizontal diameter of the last closed flux surface at the 
  115.    !     elevation of the magnetic axis.  Then rho_d = d/D.  I believe this 
  116.    !     is variable number 67 (RMINOR) in the ITER Profile Database Standard 
  117.    !     List.
  118.    !
  119.    !     It is not difficult to allow for an arbitrary radial coordinate
  120.    !     in a transport code.  One must obtain all of the radial
  121.    !     quantities as functions of rho_d rather than rho via interpolation.
  122.    !
  123.    !     However, I do not expect everyone to go to this length to test our 
  124.    !     model, since you agreed to use the sqrt(toroidal flux) definition 
  125.    !     of the radial coordinate.  Thus, I suggest the following alternative:
  126.    !     Simply use the rho_d coordinate to define the scale lengths that 
  127.    !     appear in the formulas below.  For most quantities (such as R/LT), 
  128.    !     this simply amounts to including an additional factor d rho/d rho_d 
  129.    !     in the expressions passed to this subroutine.  While not completely 
  130.    !     correct, this workaround captures the dominant effect, related to 
  131.    !     evaluating the flux near the critical gradient.
  132.    !
  133.    ! Summary of comments:
  134.    ! -------------------
  135.    ! (1) The general geometry extensions to the IFS/PPPL model were derived 
  136.    !     using rho = d/D = RMINOR as the radial coordinate.  To be 
  137.    !     most accurate, the transport equation should be solved using d/D 
  138.    !     as the radial coordinate.
  139.    !
  140.    !     If you use rho proportional to sqrt(toroidal flux) instead of rho=d/D
  141.    !     as your radial coordinate, you should at least carefully define the 
  142.    !     scale lengths as indicated below (using rho=d/D).
  143.    !     
  144.    ! (2) This routine should be used to return the thermal transport
  145.    !     coefficients (chi_i, chi_e) for energy transport equations of the form
  146.    !
  147.    ! (3/2) d(n T)/dt = (1/V') d/drho V' <|grad rho|> n chi d/drho(T)] + ...
  148.    !                                           
  149.    !     Note that <|grad rho|> only appears to the first power according
  150.    !     to this definition of chi.  If your code is hardwired to solve an
  151.    !     equation of the form 
  152.    !
  153.    ! (3/2) d(n T)/dt = (1/V') d/drho V' <|grad rho|**2> n chi d/drho(T)] + ...
  154.    !
  155.    !     then multiply the chi_i and chi_e obtained from this routine by 
  156.    !     the factor <|grad rho|>/<|grad rho|**2>.
  157.    !     
  158.    !     This parameterization of chi is not complete.  There are significant
  159.    !     neglected physical processes that are known to be important in 
  160.    !     many operational regimes.  
  161.    !
  162.    !     The most significant problems are: 
  163.    !
  164.    !     (1) Trapped ion/long wavelength ITG modes.  These modes are known 
  165.    !     to be unstable for typical edge tokamak parameters.  However, until 
  166.    !     we have nonlinear estimates of the associated thermal diffusivity, 
  167.    !     these modes are ignored, leading to overly optimistic predictions of
  168.    !     edge thermal confinement.  
  169.    !     (2) Trapped electron modes, which can alter the stability boundary 
  170.    !     significantly for low collisionality.  At high collisionality these 
  171.    !     modes are generally stable and thus largely irrelevant.  When present, 
  172.    !     they are associated most strongly with particle transport, although 
  173.    !     there is also an associated heat transport.  
  174.    !     (3) Minority ion density gradients, which can strongly change chi 
  175.    !     and LT_crit. 
  176.    !     (4) Sheared flows, which are stabilizing.  This includes diamagnetic 
  177.    !     and ExB shear flows.
  178.    !     (5) Finite beta effects, generally stabilizing.
  179.    !-------------------------------------------------------------------------
  180.    ! INPUT:
  181.    !
  182.    !   rlt:   R/L_Ti, where R = major radius and 1/L_Ti = -1/T_i dT_i/drho_d
  183.    !   rln:   R/L_ni, where 1/L_ni = -1/n_i dn_i/drho_d
  184.    !  rlne:   R/L_ne, where 1/L_ne = -1/n_e dn_e/drho_d
  185.    !     q:   The safety factor.
  186.    ! kappa:   The elongation, defined here to be the kappa = maximum 
  187.    !           height/maximum diameter
  188.    !  shat:   Magnetic shear = rho_d/q dq/drho_d
  189.    !   zth:   Thermal Z_eff.  The simulations that were carried out to 
  190.    !           generate the formulae in this subroutine assumed the plasma 
  191.    !           was composed of a thermal hydrogenic species, thermal carbon, 
  192.    !           a hydrogenic beam species, and electrons.  We found that low-Z
  193.    !           impurities primarily act to dilute the main ion concentration, 
  194.    !           and can accounted for to first order by modifying the 
  195.    !           definition of Z_eff.  Some of the more important effects of 
  196.    !           the fast ions in the plasma are also partially accounted 
  197.    !           for by this parameter, which is:
  198.    !           zth == (n_i + 36 n_C)/(n_e - n_beam)
  199.    ! nbeam:   Local fast ion (beam) density normalized to the electron
  200.    !          density.  
  201.    !   tau:   T_i/T_e.  Note that this is opposite to a widely used convention. 
  202.    !   eps:   rho_d/R, the local minor radius normalized to the major radius. 
  203.    !   gnu:   Dimensionless collisionality parameter.
  204.    !           gnu == rmajor*2.5e-7*n_e/(T_e**1.5*T_i**0.5), where n_e is in 
  205.    !            units of cm**-3, T_e and T_i are in eV, and rmajor is in units 
  206.    !            of m.  For an R = 2.4 m, 100 eV, 1e13 plasma, gnu=600.
  207.    ! rmajor:  Major radius of the plasma
  208.    !  rho_i:  Local thermal gyroradius of thermal hydrogenic species.  
  209.    !   v_ti:  sqrt(T_i/m_i) where T_i and m_i are the local thermal hydrogenic 
  210.    !           temperature and average thermal hydrogenic mass.
  211.    !
  212.    ! Units - The only dimensional parameters in the inputs are the major
  213.    !         radius, rho_i, and v_t.  Their units should be consistent; 
  214.    !         the chis that are returned will be in units of L*L*T, where 
  215.    !         L and T are the respective length and time units for the inputs.
  216.    !
  217.    ! OUTPUT:
  218.    !
  219.    !  rltcrit:  R/L_Tcrit for ITG mode.
  220.    ! rltcritz:  R/L_Tcrit for carbon branch.
  221.    !    chi_0:  Normalized chi (ignore).
  222.    !        g:  L_Tc/L_T, where L_Tc is the critical temperature gradient 
  223.    !             scale length for the deuterium branch of the ITG mode.
  224.    !    chi_i:  Anomalous ion thermal diffusivity from toroidal ITG mode.
  225.    !    chi_e:  Anomalous electron thermal diffusivity from toroidal ITG mode.
  226.    !-------------------------------------------------------------------------
  227.    
  228.    subroutine ifs_pppl(rlt,&
  229.         rln,&
  230.         rlne,&
  231.         q,&
  232.         kappa,&
  233.         shat,&
  234.         zth,&
  235.         nbeam,&
  236.         tau,&
  237.         eps,&
  238.         gnu,&
  239.         rmajor,&
  240.         rho_i,&
  241.         v_ti,&
  242.         rltcrit,&
  243.         rltcritz,&
  244.         chi_0,&
  245.         g,&
  246.         chi_i,&
  247.         chi_e) 
  248.    
  249.      implicit none
  250.    
  251.      ! INPUT
  252.      real, intent(in) :: rlt,rln,rlne,q,kappa
  253.      real, intent(in) :: shat,zth,nbeam,tau,eps,gnu
  254.      real, intent(in) :: rmajor,rho_i,v_ti
  255.    
  256.      ! OUTPUT
  257.      real, intent(inout) :: rltcrit,rltcritz,chi_0
  258.      real, intent(inout) :: g,chi_i,chi_e
  259.    
  260.      ! INTERNAL
  261.      real :: taub,nu,chi0
  262.      real :: f_0,f_z,chiz,g_facz
  263.      real :: c1,trln,trlne,tshat
  264.      real :: chie1,chie2,g_fac1
  265.    
  266.    10 format(t2,a,t10,1pe12.5)
  267.      if (0==1) then
  268.         print 10,'rlt',rlt
  269.         print 10,'rln',rln
  270.         print 10,'rlne',rlne
  271.         print 10,'q',q
  272.         print 10,'kappa',kappa
  273.         print 10,'shat',shat
  274.         print 10,'zth',zth
  275.         print 10,'nbeam',nbeam
  276.         print 10,'tau',tau
  277.         print 10,'eps',eps
  278.         print 10,'gnu',gnu
  279.         print 10,'rmajor',rmajor
  280.         print 10,'rho_i',rho_i
  281.         print 10,'v_ti',v_ti
  282.      endif
  283.    
  284.      taub = tau/(1.0-nbeam)
  285.      nu   = gnu*0.84
  286.    
  287.      trln  = min(abs(rln),6.0)*sign(1.0,rln)
  288.      trlne = min(abs(rlne),6.0)
  289.    
  290.      ! Correct low-shear limit (s<0.5) by enforing the 
  291.      ! well-known (approximate) ITG symmetry about s=0.5.
  292.      ! (J. Candy, 4 November 2007)
  293.    
  294.      if (shat > 0.5) then
  295.         tshat = shat
  296.      else
  297.         tshat = 1.0-shat
  298.      endif
  299.    
  300.      ! Critical ion temperature gradients:
  301.    
  302.      rltcrit = 2.46*(1.0+2.78/q**2)**0.26* &
  303.           (zth/2.0)**0.7*taub**0.52 &
  304.           *( (0.671+0.570*tshat-0.189*trln)**2 &
  305.           +0.335*trln+0.392-0.779*tshat+0.210*tshat**2) &
  306.           *(1.0-0.942*(2.95*eps**1.257/nu**0.235-0.2126) &
  307.           *zth**0.516/tshat**0.671)
  308.    
  309.      rltcritz = 0.75*(1.0+taub)*(1.0+tshat)* &
  310.           max(1.0,3.0-2.0*trlne/3.0)* &
  311.           (1.0+6.0*max(0.0,2.9-zth))
  312.    
  313.      if (zth > 3.0) then
  314.         c1 = (3.0/zth)**1.8
  315.      else
  316.         c1 = 1.0
  317.      endif
  318.    
  319.      f_0 = 11.8*c1*q**1.13/(1.0+tshat**0.84)/taub**1.07 &
  320.           *(1.0+6.72*eps/nu**0.26/q**0.96) &
  321.           /(1.0+((kappa-1.0)*q/3.6)**2)
  322.    
  323.      f_z = 7.88/(1.0+tshat)*max(0.25,zth-3.0)/taub**0.8 &
  324.           /(1.0+((kappa-1.0)*q/3.6)**2)
  325.    
  326.      chi0 = f_0*rho_i**2*v_ti/rmajor
  327.      chiz = f_z*rho_i**2*v_ti/rmajor
  328.    
  329.      if (rlt-rltcrit > 0.0) then
  330.         g_fac1 = min(sqrt(rlt-rltcrit),(rlt-rltcrit))
  331.      else
  332.         g_fac1 = 0.0
  333.      endif
  334.    
  335.      if (rlt-rltcritz > 0.0) then
  336.         g_facz = min(sqrt(rlt-rltcritz),(rlt-rltcritz))
  337.      else
  338.         g_facz = 0.0
  339.      endif
  340.    
  341.      chi_i = max(chi0*g_fac1,chiz*g_facz)
  342.    
  343.      g     = rlt/rltcrit
  344.      chi_0 = chi0*sqrt(abs(rltcrit))
  345.    
  346.      chie1 = chi0*g_fac1*1.44*tau**0.4*(q/tshat)**0.3*nu**0.14 &
  347.           *max(0.16667,eps)
  348.      chie1 = 0.5*chie1*(1.0+trlne/3.0)
  349.    
  350.      chie2 = 0.5*max(2.0,(1.0+rlne/3.0))
  351.      chie2 = chie2*0.526*tau*nu**0.22
  352.      chie2 = chie2*chiz*g_facz
  353.    
  354.      ! Correction for n_i/n_e and ratio of heat fluxes rather than chi_s:
  355.    
  356.      chi_e = max(chie1,chie2)*(7.0-zth)/6.0
  357.    
  358.      chi_i = max(0.0,chi_i)
  359.      chi_e = max(0.0,chi_e)
  360.    
  361.    
  362.      if (0==1) then
  363.         print 10,'chi_i',chi_i
  364.         print 10,'chi_e',chi_e
  365.      endif
  366.    
  367.      return
  368.    
  369.    end subroutine ifs_pppl
ftn-5011 ftn: NOTE IFS_PPPL, File = ifs_pppl.f90, Line = 369 
  Label "10" is unused.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   IFS_PPPL (Line 287, file ifs_pppl.f90)
                   IFS_PPPL (Line 288, file ifs_pppl.f90)
                   IFS_PPPL (Line 344, file ifs_pppl.f90)

Name  Messages
----  --------
IFS_PPPL
      Defined as:  Subroutine (line 228, file ifs_pppl.f90)

      Interface:   None

      Calls:       ABS(Intrinsic) (Line 287, file ifs_pppl.f90)
                   ABS(Intrinsic) (Line 288, file ifs_pppl.f90)
                   ABS(Intrinsic) (Line 344, file ifs_pppl.f90)
                   MIN(Intrinsic) (Line 287, file ifs_pppl.f90)
                   MIN(Intrinsic) (Line 288, file ifs_pppl.f90)
                   MIN(Intrinsic) (Line 330, file ifs_pppl.f90)
                   MIN(Intrinsic) (Line 336, file ifs_pppl.f90)
                   SIGN(Intrinsic) (Line 287, file ifs_pppl.f90)
                   MAX(Intrinsic) (Line 310, file ifs_pppl.f90)
                   MAX(Intrinsic) (Line 311, file ifs_pppl.f90)
                   MAX(Intrinsic) (Line 323, file ifs_pppl.f90)
                   MAX(Intrinsic) (Line 341, file ifs_pppl.f90)
                   MAX(Intrinsic) (Line 347, file ifs_pppl.f90)
                   MAX(Intrinsic) (Line 350, file ifs_pppl.f90)
                   MAX(Intrinsic) (Line 356, file ifs_pppl.f90)
                   MAX(Intrinsic) (Line 358, file ifs_pppl.f90)
                   MAX(Intrinsic) (Line 359, file ifs_pppl.f90)
                   SQRT(Intrinsic) (Line 330, file ifs_pppl.f90)
                   SQRT(Intrinsic) (Line 336, file ifs_pppl.f90)
                   SQRT(Intrinsic) (Line 344, file ifs_pppl.f90)

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   IFS_PPPL (Line 310, file ifs_pppl.f90)
                   IFS_PPPL (Line 311, file ifs_pppl.f90)
                   IFS_PPPL (Line 323, file ifs_pppl.f90)
                   IFS_PPPL (Line 341, file ifs_pppl.f90)
                   IFS_PPPL (Line 347, file ifs_pppl.f90)
                   IFS_PPPL (Line 350, file ifs_pppl.f90)
                   IFS_PPPL (Line 356, file ifs_pppl.f90)
                   IFS_PPPL (Line 358, file ifs_pppl.f90)
                   IFS_PPPL (Line 359, file ifs_pppl.f90)

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   IFS_PPPL (Line 287, file ifs_pppl.f90)
                   IFS_PPPL (Line 288, file ifs_pppl.f90)
                   IFS_PPPL (Line 330, file ifs_pppl.f90)
                   IFS_PPPL (Line 336, file ifs_pppl.f90)

Name  Messages
----  --------
SIGN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   IFS_PPPL (Line 287, file ifs_pppl.f90)

Name  Messages
----  --------
SQRT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   IFS_PPPL (Line 330, file ifs_pppl.f90)
                   IFS_PPPL (Line 336, file ifs_pppl.f90)
                   IFS_PPPL (Line 344, file ifs_pppl.f90)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
