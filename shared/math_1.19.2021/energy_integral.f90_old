!---------------------------------------------------------
! energy_integral.f90
!
! PURPOSE:
!  Construct energy grid and integration weights.
!
! NOTES:
!  For one energy gridpoint, the rule is trivial.
!
! FOR MAXWELLIAN DISTRIBUTIONS:
!
!  For n_energy > 1, we break the integration into
!  two regions: 
!
!  region 1: (0,energy_max)
!  region 2: (energy_max,inf)
!
!  Region 1:
!  --------
!
!  To do the region 1 integral, we change variable to s, 
!  where:
!                          x
!                   2      /          -t
!        s(x) = --------   | sqrt(t) e   dt
!               sqrt(pi)   /
!                          0
!
!  Clearly, s(inf) = 2/sqrt(pi) * Gamma(3/2) = 1.0
!
!  s(x) = P(3/2,x)  [p. 262, Abramowitz and Stegun]
!
!  P(3/2,x) = P(1/2,x) - sqrt(x) exp(-x) / Gamma(3/2)
!  P(1/2,x) = Erf(sqrt(x))
!
!  We use Gauss-Legendre weights on (0,s(energy_max)) to 
!  generate n_energy-1 points:
!
!     "call GaussLegendre(0.0,s0,sn,wn,n_energy-1)"
! 
!  Then, we invert s(energy(i)) = sn(i) for the 
!  abscissae energy(i).
!
!
!  Region 2:
!  --------
!
!  Method 1:
!
!   The region 2 integral (which ought to be exponentially
!   small) is done with one weight at position 
!
!            energy(n_energy) = energy_max.
!
!   The weight is just 1-s0.
!
! FOR SLOWING DOWN DISTRIBUTIONS:
!
!  With energy normalized to the birth energy,
!  the normalized distribution function takes the form
!
!                       3                    eps^(1/2)
!  f(eps) = -------------------------  ---------------------- Theta(1-eps)
!           2 ln[(1+eps_c^3)/eps_c^3]   eps_c^(3/2)+eps^(3/2)
!
!  With eps_c the "crossover energy" (velocity at which electron and ion
!  collisions contribute equally to slowing down) normalized to the birth
!  energy and Theta indicating the standard step function.
!
!  The crossover energy is a function of radius. We choose the
!  energy grid values to be independent of radius, satisfying
!  the condition that each bin is of equal weight at the
!  reference radius. The grid energy value falls simply
!  in the center of the bin.
!
!  The integral over a region (a,b) has the analytic solution:
!
!    /b                          1             [  eps_c^(3/2)+b^(3/2) ]
!    | f(eps) d eps = ---------------------- ln|----------------------|
!    /a              ln[(1+eps_c^3)/eps_c^3]   [  eps_c^(3/2)+a^(3/2) ]
!
!  A region (a,b) has integral weight equal to (1/n) times the total
!  when b is given by:
!
!    b = [(eps_c^(3/2)+a^(3/2))*((eps_c^(3/2)+1)/eps_c^(3/2))^(1/n)-eps_c^(3/2)]^(2/3)
!
!------------------------------------------------------------------------



subroutine energy_integral(n_energy,energy_max,n_kinetic,n_x,ir_norm,energy,w_energy,velocity_dist_method_vec,energy_c)

  use math_constants

  !------------------------------------------
  implicit none
  !
  integer, intent(in) :: n_energy
  integer, intent(in) :: n_kinetic
  integer, intent(in) :: n_x
  integer, intent(in) :: ir_norm
  real, intent(in) :: energy_max(n_kinetic)
  integer, intent(in) :: velocity_dist_method_vec(5)
  real, intent(in) :: energy_c(n_x)
  ! 
  real, intent(inout) :: energy(n_energy,n_kinetic)
  real, intent(inout) :: w_energy(n_energy,n_kinetic,n_x)
  !
  integer :: i
  integer :: is
  integer :: ix
  !
  real :: s_max
  real :: s1
  real :: d_e
  real :: ec32
  real :: a
  real :: b
  !
  real, dimension(:), allocatable :: sn
  real, dimension(:), allocatable :: wn
  !
  real, external :: p32
  !------------------------------------------

  allocate(sn(n_energy-1))
  allocate(wn(n_energy-1))


  do is = 1, n_kinetic

   select case (velocity_dist_method_vec(is))

   case default

     d_e = energy_max(is)/n_energy

     if (n_energy == 1) then

        energy(1,is)   = energy_max(is)
        w_energy(1,is,:) = 1.0

     else 

        ! p32(x) == P(3/2,x)

        s_max = p32(energy_max(is))
        s1 = 1.0-s_max

        call gauss_legendre(0.0,s_max,sn,wn,n_energy-1)

        ! Map abscissae to energy:

        do i=1,n_energy-1
           w_energy(i,is,:) = wn(i)
           call invert_p32(sn(i),energy(i,is),energy_max(is))
        enddo

        ! Add remainder

        energy(n_energy,is) = energy_max(is)

        w_energy(n_energy,is,:) = s1 

     endif

   case(2)   ! Slowing down distribution

    energy_max(is) = 1.
    a = 0.
    do i = 1, n_energy
      ec32 = (energy_c(ir_norm))**1.5
      b = ( (ec32+a**1.5)*((ec32+1.)/ec32)**(1./n_energy) - ec32)**(2./3.)
      energy(i,is) = 0.5*(b+a)
!      print *, energy_c(ir_norm), ec32, a, b
      do ix = 1, n_x
        ec32 = (energy_c(ix))**1.5
        w_energy(i,is,ix) = log((ec32+b**1.5)/(ec32+a**1.5)) / &
                              log((ec32+1.)/ec32)
      enddo ! Radius loop, is
      a = b
    enddo ! Energy loop, i

   end select ! Distribution function method 

  enddo  ! Kinetic species loop

  deallocate(sn)
  deallocate(wn)

end subroutine energy_integral
