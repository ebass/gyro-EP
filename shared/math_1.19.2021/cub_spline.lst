%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /global/u2/b/bassem/gyro-EP/shared/math/cub_spline.f90
Compiled : 01/19/21  14:38:37
Compiler : Version 9.1.0
Ftnlx    : Version 9.1.0 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hdynamic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -hnoomp -em
           -J/global/homes/b/bassem/gyro-EP/modules -sreal64 -eD -Ktrap=fp -m1
           -Rbcdps -c cub_spline.f90
           -I/opt/cray/pe/cce/9.1.0/cce-clang/x86_64/lib/clang/9.0.0/include
           -I/opt/cray/pe/cce/9.1.0/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/fftw/3.3.8.4/haswell/include
           -I/opt/cray/pe/libsci/19.06.1/CRAY/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.10/gni/mpich-cray/9.0/include
           -I/opt/cray/pe/hdf5/1.10.5.2/cray/9.0/include
           -I/opt/cray/pe/netcdf/4.6.3.2/cray/9.0/include
           -I/opt/cray/rca/2.2.20-7.0.1.1_4.53__g8e3fb5b.ari/include
           -I/opt/cray/alps/6.6.58-7.0.1.1_6.10__g437d88db.ari/include
           -I/opt/cray/xpmem/2.2.20-7.0.1.1_4.14__g0475745.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-7.0.1.1_6.32__g3b1768f.ari/include
           -I/opt/cray/dmapp/7.1.1-7.0.1.1_4.54__g38cf134.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/ugni/6.0.14.0-7.0.1.1_7.40__ge78e5b0.ari/include
           -I/opt/cray/udreg/2.3.2-7.0.1.1_3.38__g8175d3d.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.1.1_4.16__g7109084.ari/include
           -I/opt/cray/krca/2.2.6-7.0.1.1_5.39__gb641b12.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
Program
  Units  : CUB_SPLINE

ftnlx report
------------
Source   : /global/u2/b/bassem/gyro-EP/shared/math/cub_spline.f90
Date     : 01/19/2021  14:38:37


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    !---------------------------------------------------------------
    2.    ! cub_spline.f90
    3.    !
    4.    ! PURPOSE:
    5.    !  Take known points x(1:n),y(1:n) and perform cubic spline
    6.    !  interpolation at the node points xi(1:ni) to give yi(1:ni).
    7.    !
    8.    !  Use 'natural' cubic spline interpolation, where natural 
    9.    !  means the second derivative is zero at the boundaries.
   10.    !
   11.    !  INPUT  : x(1:n),y(1:n),n,xi(1:ni),ni
   12.    !
   13.    !  OUTPUT : yi(1:ni)
   14.    !
   15.    !  The only requirements are 
   16.    !  
   17.    !  1. Ordered data: x(i+1) > x(i) and xi(i+1) > xi(i).
   18.    !  2. Bounded data: xi(1) < x(1) and xi(ni) > x(n).
   19.    !----------------------------------------------------------------
   20.    
   21.    subroutine cub_spline(x,y,n,xi,yi,ni)
   22.    
   23.      !-------------------------------------------------------------
   24.      implicit none
   25.      !
   26.      integer :: i,ii
   27.      real :: x0 
   28.      !
   29.      integer, intent(in) :: n
   30.      real, intent(in), dimension(n) :: x,y
   31.      !
   32.      integer, intent(in) :: ni
   33.      real, dimension(ni) :: xi,yi
   34.      !
   35.      ! LAPACK working variables
   36.      !
   37.      integer :: info
   38.      integer, dimension(n) :: ipiv 
   39.      real, dimension(n) :: c,z
   40.      real, dimension(n-1) :: zl,zu,h
   41.      real, dimension(n-2) :: zu2
   42.      real, dimension(n-1) :: b,d
   43.      !-------------------------------------------------------------
   44.    
   45.      !-------------------------------------------------------------
   46.      ! Check to see that interpolated point is inside data interval
   47.      !
   48.      if (xi(1) < x(1) .or. xi(ni) > x(n)) then
   49.         print *,'Error in cub_spline'
   50.         print *,'xi(1) < x(1)',xi(1),x(1) 
   51.         print *,'xi(ni) < x(n)',xi(ni),x(n) 
   52.      endif 
   53.      !-------------------------------------------------------------
   54.    
   55.      !-------------------------------------------------------------
   56.      ! Define coefficients of spline matrix 
   57.      !
   58.      do i=1,n-1 
   59.         h(i)  = x(i+1)-x(i)
   60.         zl(i) = h(i)
   61.         zu(i) = h(i)
   62.      enddo
   63.      zl(n-1) = 0.0
   64.      zu(1)   = 0.0
   65.    
   66.      z(1) = 1.0
   67.      c(1) = 0.0
   68.      do i=2,n-1
   69.         z(i) = 2.0*(h(i-1)+h(i))
   70.         c(i) = 3.0*((y(i+1)-y(i))/h(i)-(y(i)-y(i-1))/h(i-1))
   71.      enddo
   72.      z(n) = 1.0
   73.      c(n) = 0.0
   74.      !-------------------------------------------------------------
   75.    
   76.      !-------------------------------------------------------------
   77.      ! Solve the system using LAPACK
   78.      !
   79.      call DGTTRF(n,zl,z,zu,zu2,ipiv,info)
   80.      call DGTTRS('N',n,1,zl,z,zu,zu2,ipiv,c,n,info)
   81.      !-------------------------------------------------------------
   82.    
   83.      !-------------------------------------------------------------
   84.      ! Find remaining polynomial coefficients:
   85.      !
   86.      c(n) = 0.0
   87.      do i=1,n-1
   88.         b(i) = (y(i+1)-y(i))/h(i)-h(i)*(2.0*c(i)+c(i+1))/3.0
   89.         d(i) = (c(i+1)-c(i))/(3.0*h(i))
   90.      enddo
   91.      !-------------------------------------------------------------
   92.    
   93.      !print *,c(:)
   94.      
   95.      !-------------------------------------------------------------
   96.      ! Using known polynomial coefficients, perform interpolation.
   97.      !
   98.      !  S(x) = y(i) + b(i) [x-x(i)] + c(i) [x-x(i)]^2 
   99.      !                                        + d(i) [x-x(i)]^3
  100.      !
  101.      i  = 1
  102.      ii = 1
  103.      do while (ii <= ni)
  104.         x0 = xi(ii)
  105.         if (x0 <= x(i+1)) then
  106.            yi(ii) = y(i)+(x0-x(i))*(b(i)+(x0-x(i))*(c(i)+(x0-x(i))*d(i)))
  107.            ii = ii+1
  108.         else
  109.            i = i+1
  110.         endif
  111.      enddo
  112.      !-------------------------------------------------------------
  113.    
  114.    end subroutine cub_spline
  115.    


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
CUB_SPLINE
      Defined as:  Subroutine (line 21, file cub_spline.f90)

      Interface:   None

      Calls:       DGTTRF (Line 79, file cub_spline.f90)
                   DGTTRS (Line 80, file cub_spline.f90)

Name  Messages
----  --------
DGTTRF
      Defined as:  No definitions.

      Interface:   None

      Called By:   CUB_SPLINE (Line 79, file cub_spline.f90)

Name  Messages
----  --------
DGTTRS
      Defined as:  No definitions.

      Interface:   None

      Called By:   CUB_SPLINE (Line 80, file cub_spline.f90)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
